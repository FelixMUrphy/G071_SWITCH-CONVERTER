
SBUS_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005918  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af8  08005af8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b00  08005b00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e20  20000010  08005b18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e30  08005b18  00021e30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f5f  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000313c  00000000  00000000  00033fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00037118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d28  00000000  00000000  00038228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e38  00000000  00000000  00038f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138f7  00000000  00000000  0003bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a02f8  00000000  00000000  0004f67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cd0  00000000  00000000  000ef978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000f3648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059c0 	.word	0x080059c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080059c0 	.word	0x080059c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fd60 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f832 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fa30 	bl	8000a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000630:	f000 fa00 	bl	8000a34 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000634:	f000 f874 	bl	8000720 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000638:	f000 f8cc 	bl	80007d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f924 	bl	8000888 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000640:	f000 f97c 	bl	800093c <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000644:	f000 f9ba 	bl	80009bc <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000648:	f002 ff46 	bl	80034d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SW */
  SWHandle = osThreadNew(StartDefaultTask, NULL, &SW_attributes);
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <main+0x58>)
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <main+0x5c>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f002 ff88 	bl	8003568 <osThreadNew>
 8000658:	0002      	movs	r2, r0
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <main+0x60>)
 800065c:	601a      	str	r2, [r3, #0]

  /* creation of SBUS2CRSF */
  SBUS2CRSFHandle = osThreadNew(StartTask02, NULL, &SBUS2CRSF_attributes);
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <main+0x64>)
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <main+0x68>)
 8000662:	2100      	movs	r1, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f002 ff7f 	bl	8003568 <osThreadNew>
 800066a:	0002      	movs	r2, r0
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <main+0x6c>)
 800066e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000670:	f002 ff54 	bl	800351c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x54>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	08005a00 	.word	0x08005a00
 800067c:	08000aed 	.word	0x08000aed
 8000680:	200004dc 	.word	0x200004dc
 8000684:	08005a24 	.word	0x08005a24
 8000688:	08000afd 	.word	0x08000afd
 800068c:	200004e0 	.word	0x200004e0

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b093      	sub	sp, #76	; 0x4c
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2410      	movs	r4, #16
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2338      	movs	r3, #56	; 0x38
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f005 f957 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	003b      	movs	r3, r7
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f005 f950 	bl	8005954 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f969 	bl	8001990 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2240      	movs	r2, #64	; 0x40
 80006d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f9a1 	bl	8001a28 <HAL_RCC_OscConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ea:	f000 fa0f 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	003b      	movs	r3, r7
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	003b      	movs	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000706:	003b      	movs	r3, r7
 8000708:	2100      	movs	r1, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fca6 	bl	800205c <HAL_RCC_ClockConfig>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000714:	f000 f9fa 	bl	8000b0c <Error_Handler>
  }
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b013      	add	sp, #76	; 0x4c
 800071e:	bd90      	pop	{r4, r7, pc}

08000720 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000726:	4a29      	ldr	r2, [pc, #164]	; (80007cc <MX_LPUART1_UART_Init+0xac>)
 8000728:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 100000;
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 800072c:	4a28      	ldr	r2, [pc, #160]	; (80007d0 <MX_LPUART1_UART_Init+0xb0>)
 800072e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	0152      	lsls	r2, r2, #5
 8000736:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_2;
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	0192      	lsls	r2, r2, #6
 800073e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 800074a:	2204      	movs	r2, #4
 800074c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000762:	2203      	movs	r2, #3
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0292      	lsls	r2, r2, #10
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlpuart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0252      	lsls	r2, r2, #9
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 8000778:	2200      	movs	r2, #0
 800077a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 800077e:	0018      	movs	r0, r3
 8000780:	f001 ffce 	bl	8002720 <HAL_UART_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000788:	f000 f9c0 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fd47 	bl	8003224 <HAL_UARTEx_SetTxFifoThreshold>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 800079a:	f000 f9b7 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fd7e 	bl	80032a4 <HAL_UARTEx_SetRxFifoThreshold>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART1_UART_Init+0x90>
  {
    Error_Handler();
 80007ac:	f000 f9ae 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MX_LPUART1_UART_Init+0xa8>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fcfc 	bl	80031b0 <HAL_UARTEx_DisableFifoMode>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LPUART1_UART_Init+0xa0>
  {
    Error_Handler();
 80007bc:	f000 f9a6 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	40008000 	.word	0x40008000
 80007d0:	000186a0 	.word	0x000186a0

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_USART1_UART_Init+0xa8>)
 80007da:	4a29      	ldr	r2, [pc, #164]	; (8000880 <MX_USART1_UART_Init+0xac>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_USART1_UART_Init+0xa8>)
 80007e0:	4a28      	ldr	r2, [pc, #160]	; (8000884 <MX_USART1_UART_Init+0xb0>)
 80007e2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_USART1_UART_Init+0xa8>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	0152      	lsls	r2, r2, #5
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_USART1_UART_Init+0xa8>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	0192      	lsls	r2, r2, #6
 80007f2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_USART1_UART_Init+0xa8>)
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	00d2      	lsls	r2, r2, #3
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_USART1_UART_Init+0xa8>)
 80007fe:	2208      	movs	r2, #8
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_USART1_UART_Init+0xa8>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_USART1_UART_Init+0xa8>)
 800081c:	2203      	movs	r2, #3
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	0292      	lsls	r2, r2, #10
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART1_UART_Init+0xa8>)
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	0252      	lsls	r2, r2, #9
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000832:	0018      	movs	r0, r3
 8000834:	f001 ff74 	bl	8002720 <HAL_UART_Init>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800083c:	f000 f966 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000842:	2100      	movs	r1, #0
 8000844:	0018      	movs	r0, r3
 8000846:	f002 fced 	bl	8003224 <HAL_UARTEx_SetTxFifoThreshold>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800084e:	f000 f95d 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000854:	2100      	movs	r1, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f002 fd24 	bl	80032a4 <HAL_UARTEx_SetRxFifoThreshold>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 f954 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_USART1_UART_Init+0xa8>)
 8000866:	0018      	movs	r0, r3
 8000868:	f002 fca2 	bl	80031b0 <HAL_UARTEx_DisableFifoMode>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_USART1_UART_Init+0xa0>
  {
    Error_Handler();
 8000870:	f000 f94c 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	200000c0 	.word	0x200000c0
 8000880:	40013800 	.word	0x40013800
 8000884:	000186a0 	.word	0x000186a0

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 800088e:	4a29      	ldr	r2, [pc, #164]	; (8000934 <MX_USART2_UART_Init+0xac>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 8000894:	4a28      	ldr	r2, [pc, #160]	; (8000938 <MX_USART2_UART_Init+0xb0>)
 8000896:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	0152      	lsls	r2, r2, #5
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0192      	lsls	r2, r2, #6
 80008a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	0292      	lsls	r2, r2, #10
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	0252      	lsls	r2, r2, #9
 80008e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 ff1a 	bl	8002720 <HAL_UART_Init>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80008f0:	f000 f90c 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 fc93 	bl	8003224 <HAL_UARTEx_SetTxFifoThreshold>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000902:	f000 f903 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 8000908:	2100      	movs	r1, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f002 fcca 	bl	80032a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000914:	f000 f8fa 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0xa8>)
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fc48 	bl	80031b0 <HAL_UARTEx_DisableFifoMode>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000924:	f000 f8f2 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	20000154 	.word	0x20000154
 8000934:	40004400 	.word	0x40004400
 8000938:	000186a0 	.word	0x000186a0

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_USART3_UART_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_USART3_UART_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	0152      	lsls	r2, r2, #5
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	0192      	lsls	r2, r2, #6
 800095a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000966:	2204      	movs	r2, #4
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000984:	2203      	movs	r2, #3
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0292      	lsls	r2, r2, #10
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <MX_USART3_UART_Init+0x74>)
 800099a:	0018      	movs	r0, r3
 800099c:	f001 fec0 	bl	8002720 <HAL_UART_Init>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80009a4:	f000 f8b2 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	200001e8 	.word	0x200001e8
 80009b4:	40004800 	.word	0x40004800
 80009b8:	000186a0 	.word	0x000186a0

080009bc <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009c2:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <MX_USART4_UART_Init+0x74>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009c8:	22e1      	movs	r2, #225	; 0xe1
 80009ca:	0252      	lsls	r2, r2, #9
 80009cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	0292      	lsls	r2, r2, #10
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  huart4.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	0252      	lsls	r2, r2, #9
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <MX_USART4_UART_Init+0x70>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fe82 	bl	8002720 <HAL_UART_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART4_UART_Init+0x68>
  {
    Error_Handler();
 8000a20:	f000 f874 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	2000027c 	.word	0x2000027c
 8000a30:	40004c00 	.word	0x40004c00

08000a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_DMA_Init+0x58>)
 8000a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_DMA_Init+0x58>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_DMA_Init+0x58>)
 8000a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2103      	movs	r1, #3
 8000a56:	2009      	movs	r0, #9
 8000a58:	f000 fc78 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a5c:	2009      	movs	r0, #9
 8000a5e:	f000 fc8a 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2103      	movs	r1, #3
 8000a66:	200a      	movs	r0, #10
 8000a68:	f000 fc70 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f000 fc82 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2103      	movs	r1, #3
 8000a76:	200b      	movs	r0, #11
 8000a78:	f000 fc68 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000a7c:	200b      	movs	r0, #11
 8000a7e:	f000 fc7a 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000acc:	2102      	movs	r1, #2
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <MX_GPIO_Init+0x58>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	4013      	ands	r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b004      	add	sp, #16
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000

08000aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f002 fdcd 	bl	8003694 <osDelay>
 8000afa:	e7fb      	b.n	8000af4 <StartDefaultTask+0x8>

08000afc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f002 fdc5 	bl	8003694 <osDelay>
 8000b0a:	e7fb      	b.n	8000b04 <StartTask02+0x8>

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_MspInit+0x50>)
 8000b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_MspInit+0x50>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x50>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x50>)
 8000b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_MspInit+0x50>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0549      	lsls	r1, r1, #21
 8000b40:	430a      	orrs	r2, r1
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_MspInit+0x50>)
 8000b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	055b      	lsls	r3, r3, #21
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b52:	2302      	movs	r3, #2
 8000b54:	425b      	negs	r3, r3
 8000b56:	2200      	movs	r2, #0
 8000b58:	2103      	movs	r1, #3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 fbf6 	bl	800134c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b09f      	sub	sp, #124	; 0x7c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f004 fee8 	bl	8005954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	2430      	movs	r4, #48	; 0x30
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2334      	movs	r3, #52	; 0x34
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f004 fee0 	bl	8005954 <memset>
  if(huart->Instance==LPUART1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4ad5      	ldr	r2, [pc, #852]	; (8000ef0 <HAL_UART_MspInit+0x384>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d169      	bne.n	8000c72 <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 fbff 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bb6:	f7ff ffa9 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bba:	4bce      	ldr	r3, [pc, #824]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bbe:	4bcd      	ldr	r3, [pc, #820]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	0349      	lsls	r1, r1, #13
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc8:	4bca      	ldr	r3, [pc, #808]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	035b      	lsls	r3, r3, #13
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4bc7      	ldr	r3, [pc, #796]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bda:	4bc6      	ldr	r3, [pc, #792]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000bdc:	2102      	movs	r1, #2
 8000bde:	430a      	orrs	r2, r1
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
 8000be2:	4bc4      	ldr	r3, [pc, #784]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2202      	movs	r2, #2
 8000be8:	4013      	ands	r3, r2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = RCin1_Pin|GPIO_PIN_11;
 8000bee:	2164      	movs	r1, #100	; 0x64
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	22c0      	movs	r2, #192	; 0xc0
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	4ab9      	ldr	r2, [pc, #740]	; (8000ef8 <HAL_UART_MspInit+0x38c>)
 8000c14:	0019      	movs	r1, r3
 8000c16:	0010      	movs	r0, r2
 8000c18:	f000 fd56 	bl	80016c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000c1c:	4bb7      	ldr	r3, [pc, #732]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c1e:	4ab8      	ldr	r2, [pc, #736]	; (8000f00 <HAL_UART_MspInit+0x394>)
 8000c20:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000c22:	4bb6      	ldr	r3, [pc, #728]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c24:	220e      	movs	r2, #14
 8000c26:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c28:	4bb4      	ldr	r3, [pc, #720]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2e:	4bb3      	ldr	r3, [pc, #716]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c34:	4bb1      	ldr	r3, [pc, #708]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c3a:	4bb0      	ldr	r3, [pc, #704]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c40:	4bae      	ldr	r3, [pc, #696]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c46:	4bad      	ldr	r3, [pc, #692]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c48:	2220      	movs	r2, #32
 8000c4a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4c:	4bab      	ldr	r3, [pc, #684]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000c52:	4baa      	ldr	r3, [pc, #680]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 fbab 	bl	80013b0 <HAL_DMA_Init>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000c5e:	f7ff ff55 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	4aa5      	ldr	r2, [pc, #660]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c68:	505a      	str	r2, [r3, r1]
 8000c6a:	4ba4      	ldr	r3, [pc, #656]	; (8000efc <HAL_UART_MspInit+0x390>)
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000c70:	e1b9      	b.n	8000fe6 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4aa3      	ldr	r2, [pc, #652]	; (8000f04 <HAL_UART_MspInit+0x398>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d168      	bne.n	8000d4e <HAL_UART_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c7c:	2130      	movs	r1, #48	; 0x30
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 fb8f 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8000c96:	f7ff ff39 	bl	8000b0c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9a:	4b96      	ldr	r3, [pc, #600]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9e:	4b95      	ldr	r3, [pc, #596]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	01c9      	lsls	r1, r1, #7
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca8:	4b92      	ldr	r3, [pc, #584]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	01db      	lsls	r3, r3, #7
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b8f      	ldr	r3, [pc, #572]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cba:	4b8e      	ldr	r3, [pc, #568]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc2:	4b8c      	ldr	r3, [pc, #560]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	4013      	ands	r3, r2
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = RCout_Pin|GPIO_PIN_7;
 8000cce:	2164      	movs	r1, #100	; 0x64
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	22c0      	movs	r2, #192	; 0xc0
 8000cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2202      	movs	r2, #2
 8000cda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	4a81      	ldr	r2, [pc, #516]	; (8000ef8 <HAL_UART_MspInit+0x38c>)
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	f000 fce7 	bl	80016c8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000cfa:	4b83      	ldr	r3, [pc, #524]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000cfc:	4a83      	ldr	r2, [pc, #524]	; (8000f0c <HAL_UART_MspInit+0x3a0>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d00:	4b81      	ldr	r3, [pc, #516]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d02:	2233      	movs	r2, #51	; 0x33
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d06:	4b80      	ldr	r3, [pc, #512]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d08:	2210      	movs	r2, #16
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0c:	4b7e      	ldr	r3, [pc, #504]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d12:	4b7d      	ldr	r3, [pc, #500]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d18:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1e:	4b7a      	ldr	r3, [pc, #488]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000d24:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d26:	2220      	movs	r2, #32
 8000d28:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2a:	4b77      	ldr	r3, [pc, #476]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d30:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fb3c 	bl	80013b0 <HAL_DMA_Init>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8000d3c:	f7ff fee6 	bl	8000b0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a71      	ldr	r2, [pc, #452]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d44:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d46:	4b70      	ldr	r3, [pc, #448]	; (8000f08 <HAL_UART_MspInit+0x39c>)
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d4c:	e14b      	b.n	8000fe6 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a6f      	ldr	r2, [pc, #444]	; (8000f10 <HAL_UART_MspInit+0x3a4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d16a      	bne.n	8000e2e <HAL_UART_MspInit+0x2c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d58:	2130      	movs	r1, #48	; 0x30
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 fb21 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8000d72:	f7ff fecb 	bl	8000b0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	4b5f      	ldr	r3, [pc, #380]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	0289      	lsls	r1, r1, #10
 8000d80:	430a      	orrs	r2, r1
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d84:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	029b      	lsls	r3, r3, #10
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d96:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9e:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	2201      	movs	r2, #1
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|RCin2_Pin;
 8000daa:	2164      	movs	r1, #100	; 0x64
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2202      	movs	r2, #2
 8000db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	187a      	adds	r2, r7, r1
 8000dcc:	23a0      	movs	r3, #160	; 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fc78 	bl	80016c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000dda:	4a4f      	ldr	r2, [pc, #316]	; (8000f18 <HAL_UART_MspInit+0x3ac>)
 8000ddc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000dde:	4b4d      	ldr	r3, [pc, #308]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000de0:	2234      	movs	r2, #52	; 0x34
 8000de2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de4:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000df6:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dfc:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000e04:	2220      	movs	r2, #32
 8000e06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e08:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 facd 	bl	80013b0 <HAL_DMA_Init>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8000e1a:	f7ff fe77 	bl	8000b0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	4a3c      	ldr	r2, [pc, #240]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000e24:	505a      	str	r2, [r3, r1]
 8000e26:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <HAL_UART_MspInit+0x3a8>)
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e2c:	e0db      	b.n	8000fe6 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART3)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a3a      	ldr	r2, [pc, #232]	; (8000f1c <HAL_UART_MspInit+0x3b0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d177      	bne.n	8000f28 <HAL_UART_MspInit+0x3bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	02c9      	lsls	r1, r1, #11
 8000e42:	430a      	orrs	r2, r1
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	02db      	lsls	r3, r3, #11
 8000e4e:	4013      	ands	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <HAL_UART_MspInit+0x388>)
 8000e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e64:	2202      	movs	r2, #2
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|SBUS_in_Pin;
 8000e6c:	2164      	movs	r1, #100	; 0x64
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	22c0      	movs	r2, #192	; 0xc0
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2202      	movs	r2, #2
 8000e7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0x38c>)
 8000e92:	0019      	movs	r1, r3
 8000e94:	0010      	movs	r0, r2
 8000e96:	f000 fc17 	bl	80016c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel4;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <HAL_UART_MspInit+0x3b8>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000ea2:	2236      	movs	r2, #54	; 0x36
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fa6c 	bl	80013b0 <HAL_DMA_Init>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_UART_MspInit+0x374>
      Error_Handler();
 8000edc:	f7ff fe16 	bl	8000b0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000ee6:	505a      	str	r2, [r3, r1]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_UART_MspInit+0x3b4>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eee:	e07a      	b.n	8000fe6 <HAL_UART_MspInit+0x47a>
 8000ef0:	40008000 	.word	0x40008000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	50000400 	.word	0x50000400
 8000efc:	20000310 	.word	0x20000310
 8000f00:	40020008 	.word	0x40020008
 8000f04:	40013800 	.word	0x40013800
 8000f08:	2000036c 	.word	0x2000036c
 8000f0c:	4002001c 	.word	0x4002001c
 8000f10:	40004400 	.word	0x40004400
 8000f14:	200003c8 	.word	0x200003c8
 8000f18:	40020030 	.word	0x40020030
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	20000424 	.word	0x20000424
 8000f24:	40020044 	.word	0x40020044
  else if(huart->Instance==USART4)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a30      	ldr	r2, [pc, #192]	; (8000ff0 <HAL_UART_MspInit+0x484>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d159      	bne.n	8000fe6 <HAL_UART_MspInit+0x47a>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_UART_MspInit+0x488>)
 8000f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_UART_MspInit+0x488>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	0309      	lsls	r1, r1, #12
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <HAL_UART_MspInit+0x488>)
 8000f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	031b      	lsls	r3, r3, #12
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <HAL_UART_MspInit+0x488>)
 8000f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_UART_MspInit+0x488>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_UART_MspInit+0x488>)
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CRSF_Pin|GPIO_PIN_1;
 8000f66:	2164      	movs	r1, #100	; 0x64
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2202      	movs	r2, #2
 8000f72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2204      	movs	r2, #4
 8000f84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	187a      	adds	r2, r7, r1
 8000f88:	23a0      	movs	r3, #160	; 0xa0
 8000f8a:	05db      	lsls	r3, r3, #23
 8000f8c:	0011      	movs	r1, r2
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 fb9a 	bl	80016c8 <HAL_GPIO_Init>
    hdma_usart4_tx.Instance = DMA1_Channel5;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000f96:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0x490>)
 8000f98:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000f9c:	2239      	movs	r2, #57	; 0x39
 8000f9e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_CIRCULAR;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 f9ef 	bl	80013b0 <HAL_DMA_Init>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_UART_MspInit+0x46e>
      Error_Handler();
 8000fd6:	f7ff fd99 	bl	8000b0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fde:	67da      	str	r2, [r3, #124]	; 0x7c
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_UART_MspInit+0x48c>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b01f      	add	sp, #124	; 0x7c
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40004c00 	.word	0x40004c00
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	20000480 	.word	0x20000480
 8000ffc:	40020058 	.word	0x40020058

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8d4 	bl	80011bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001014:	f003 fdda 	bl	8004bcc <xTaskGetSchedulerState>
 8001018:	0003      	movs	r3, r0
 800101a:	2b01      	cmp	r3, #1
 800101c:	d001      	beq.n	8001022 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800101e:	f004 faab 	bl	8005578 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <DMA1_Channel1_IRQHandler+0x14>)
 800102e:	0018      	movs	r0, r3
 8001030:	f000 fa48 	bl	80014c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000310 	.word	0x20000310

08001040 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fa3c 	bl	80014c4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <DMA1_Channel2_3_IRQHandler+0x20>)
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fa38 	bl	80014c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	2000036c 	.word	0x2000036c
 8001060:	200003c8 	.word	0x200003c8

08001064 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fa2a 	bl	80014c4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fa26 	bl	80014c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000424 	.word	0x20000424
 8001084:	20000480 	.word	0x20000480

08001088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001096:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001098:	f7ff fff6 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <LoopForever+0xe>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	; (80010e0 <LoopForever+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010c2:	f004 fc4f 	bl	8005964 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010c6:	f7ff faab 	bl	8000620 <main>

080010ca <LoopForever>:

LoopForever:
  b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   r0, =_estack
 80010cc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010d8:	08005b08 	.word	0x08005b08
  ldr r2, =_sbss
 80010dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010e0:	20001e30 	.word	0x20001e30

080010e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_COMP_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_Init+0x3c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Init+0x3c>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0049      	lsls	r1, r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f810 	bl	8001128 <HAL_InitTick>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d003      	beq.n	8001114 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e001      	b.n	8001118 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fd00 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40022000 	.word	0x40022000

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	230f      	movs	r3, #15
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_InitTick+0x88>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d02b      	beq.n	8001198 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_InitTick+0x8c>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_InitTick+0x88>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	0019      	movs	r1, r3
 800114a:	23fa      	movs	r3, #250	; 0xfa
 800114c:	0098      	lsls	r0, r3, #2
 800114e:	f7fe ffdb 	bl	8000108 <__udivsi3>
 8001152:	0003      	movs	r3, r0
 8001154:	0019      	movs	r1, r3
 8001156:	0020      	movs	r0, r4
 8001158:	f7fe ffd6 	bl	8000108 <__udivsi3>
 800115c:	0003      	movs	r3, r0
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f919 	bl	8001396 <HAL_SYSTICK_Config>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d112      	bne.n	800118e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d80a      	bhi.n	8001184 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	2301      	movs	r3, #1
 8001172:	425b      	negs	r3, r3
 8001174:	2200      	movs	r2, #0
 8001176:	0018      	movs	r0, r3
 8001178:	f000 f8e8 	bl	800134c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_InitTick+0x90>)
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e00d      	b.n	80011a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	230f      	movs	r3, #15
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e008      	b.n	80011a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118e:	230f      	movs	r3, #15
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e003      	b.n	80011a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	781b      	ldrb	r3, [r3, #0]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b005      	add	sp, #20
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x20>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	18d2      	adds	r2, r2, r3
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_IncTick+0x20>)
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200004e4 	.word	0x200004e4

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <HAL_GetTick+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	200004e4 	.word	0x200004e4

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b7f      	cmp	r3, #127	; 0x7f
 8001206:	d809      	bhi.n	800121c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	001a      	movs	r2, r3
 800120e:	231f      	movs	r3, #31
 8001210:	401a      	ands	r2, r3
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_EnableIRQ+0x30>)
 8001214:	2101      	movs	r1, #1
 8001216:	4091      	lsls	r1, r2
 8001218:	000a      	movs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	0002      	movs	r2, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b7f      	cmp	r3, #127	; 0x7f
 800123c:	d828      	bhi.n	8001290 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <__NVIC_SetPriority+0xd4>)
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	33c0      	adds	r3, #192	; 0xc0
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	589b      	ldr	r3, [r3, r2]
 800124e:	1dfa      	adds	r2, r7, #7
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	0011      	movs	r1, r2
 8001254:	2203      	movs	r2, #3
 8001256:	400a      	ands	r2, r1
 8001258:	00d2      	lsls	r2, r2, #3
 800125a:	21ff      	movs	r1, #255	; 0xff
 800125c:	4091      	lsls	r1, r2
 800125e:	000a      	movs	r2, r1
 8001260:	43d2      	mvns	r2, r2
 8001262:	401a      	ands	r2, r3
 8001264:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	019b      	lsls	r3, r3, #6
 800126a:	22ff      	movs	r2, #255	; 0xff
 800126c:	401a      	ands	r2, r3
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	0018      	movs	r0, r3
 8001274:	2303      	movs	r3, #3
 8001276:	4003      	ands	r3, r0
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127c:	481f      	ldr	r0, [pc, #124]	; (80012fc <__NVIC_SetPriority+0xd4>)
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	430a      	orrs	r2, r1
 8001288:	33c0      	adds	r3, #192	; 0xc0
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800128e:	e031      	b.n	80012f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <__NVIC_SetPriority+0xd8>)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	0019      	movs	r1, r3
 8001298:	230f      	movs	r3, #15
 800129a:	400b      	ands	r3, r1
 800129c:	3b08      	subs	r3, #8
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3306      	adds	r3, #6
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	3304      	adds	r3, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1dfa      	adds	r2, r7, #7
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	0011      	movs	r1, r2
 80012b0:	2203      	movs	r2, #3
 80012b2:	400a      	ands	r2, r1
 80012b4:	00d2      	lsls	r2, r2, #3
 80012b6:	21ff      	movs	r1, #255	; 0xff
 80012b8:	4091      	lsls	r1, r2
 80012ba:	000a      	movs	r2, r1
 80012bc:	43d2      	mvns	r2, r2
 80012be:	401a      	ands	r2, r3
 80012c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	019b      	lsls	r3, r3, #6
 80012c6:	22ff      	movs	r2, #255	; 0xff
 80012c8:	401a      	ands	r2, r3
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	0018      	movs	r0, r3
 80012d0:	2303      	movs	r3, #3
 80012d2:	4003      	ands	r3, r0
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <__NVIC_SetPriority+0xd8>)
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	001c      	movs	r4, r3
 80012e0:	230f      	movs	r3, #15
 80012e2:	4023      	ands	r3, r4
 80012e4:	3b08      	subs	r3, #8
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	430a      	orrs	r2, r1
 80012ea:	3306      	adds	r3, #6
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	18c3      	adds	r3, r0, r3
 80012f0:	3304      	adds	r3, #4
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b003      	add	sp, #12
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	1e5a      	subs	r2, r3, #1
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	045b      	lsls	r3, r3, #17
 8001314:	429a      	cmp	r2, r3
 8001316:	d301      	bcc.n	800131c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001318:	2301      	movs	r3, #1
 800131a:	e010      	b.n	800133e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <SysTick_Config+0x44>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	3a01      	subs	r2, #1
 8001322:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001324:	2301      	movs	r3, #1
 8001326:	425b      	negs	r3, r3
 8001328:	2103      	movs	r1, #3
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff ff7c 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x44>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x44>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	210f      	movs	r1, #15
 8001358:	187b      	adds	r3, r7, r1
 800135a:	1c02      	adds	r2, r0, #0
 800135c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	187b      	adds	r3, r7, r1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	0002      	movs	r2, r0
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff33 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff ffaf 	bl	8001304 <SysTick_Config>
 80013a6:	0003      	movs	r3, r0
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e077      	b.n	80014b2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <HAL_DMA_Init+0x10c>)
 80013c8:	4694      	mov	ip, r2
 80013ca:	4463      	add	r3, ip
 80013cc:	2114      	movs	r1, #20
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7fe fe9a 	bl	8000108 <__udivsi3>
 80013d4:	0003      	movs	r3, r0
 80013d6:	009a      	lsls	r2, r3, #2
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2225      	movs	r2, #37	; 0x25
 80013e0:	2102      	movs	r1, #2
 80013e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4934      	ldr	r1, [pc, #208]	; (80014c0 <HAL_DMA_Init+0x110>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6819      	ldr	r1, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f8fb 	bl	8001628 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	01db      	lsls	r3, r3, #7
 800143a:	429a      	cmp	r2, r3
 800143c:	d102      	bne.n	8001444 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	213f      	movs	r1, #63	; 0x3f
 800144e:	400a      	ands	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800145a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d011      	beq.n	8001488 <HAL_DMA_Init+0xd8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d80d      	bhi.n	8001488 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f906 	bl	8001680 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	e008      	b.n	800149a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2225      	movs	r2, #37	; 0x25
 80014a4:	2101      	movs	r1, #1
 80014a6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b002      	add	sp, #8
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	bffdfff8 	.word	0xbffdfff8
 80014c0:	ffff800f 	.word	0xffff800f

080014c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <HAL_DMA_IRQHandler+0x160>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	221c      	movs	r2, #28
 80014e0:	4013      	ands	r3, r2
 80014e2:	2204      	movs	r2, #4
 80014e4:	409a      	lsls	r2, r3
 80014e6:	0013      	movs	r3, r2
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4013      	ands	r3, r2
 80014ec:	d027      	beq.n	800153e <HAL_DMA_IRQHandler+0x7a>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2204      	movs	r2, #4
 80014f2:	4013      	ands	r3, r2
 80014f4:	d023      	beq.n	800153e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2220      	movs	r2, #32
 80014fe:	4013      	ands	r3, r2
 8001500:	d107      	bne.n	8001512 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2104      	movs	r1, #4
 800150e:	438a      	bics	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001512:	4b44      	ldr	r3, [pc, #272]	; (8001624 <HAL_DMA_IRQHandler+0x160>)
 8001514:	6859      	ldr	r1, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	221c      	movs	r2, #28
 800151c:	4013      	ands	r3, r2
 800151e:	2204      	movs	r2, #4
 8001520:	409a      	lsls	r2, r3
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_DMA_IRQHandler+0x160>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	2b00      	cmp	r3, #0
 800152e:	d100      	bne.n	8001532 <HAL_DMA_IRQHandler+0x6e>
 8001530:	e073      	b.n	800161a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	0010      	movs	r0, r2
 800153a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800153c:	e06d      	b.n	800161a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	221c      	movs	r2, #28
 8001544:	4013      	ands	r3, r2
 8001546:	2202      	movs	r2, #2
 8001548:	409a      	lsls	r2, r3
 800154a:	0013      	movs	r3, r2
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	d02e      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xec>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d02a      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2220      	movs	r2, #32
 8001562:	4013      	ands	r3, r2
 8001564:	d10b      	bne.n	800157e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	210a      	movs	r1, #10
 8001572:	438a      	bics	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2225      	movs	r2, #37	; 0x25
 800157a:	2101      	movs	r1, #1
 800157c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_DMA_IRQHandler+0x160>)
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	221c      	movs	r2, #28
 8001588:	4013      	ands	r3, r2
 800158a:	2202      	movs	r2, #2
 800158c:	409a      	lsls	r2, r3
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_DMA_IRQHandler+0x160>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2224      	movs	r2, #36	; 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d03a      	beq.n	800161a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	0010      	movs	r0, r2
 80015ac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80015ae:	e034      	b.n	800161a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	221c      	movs	r2, #28
 80015b6:	4013      	ands	r3, r2
 80015b8:	2208      	movs	r2, #8
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	d02b      	beq.n	800161c <HAL_DMA_IRQHandler+0x158>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2208      	movs	r2, #8
 80015c8:	4013      	ands	r3, r2
 80015ca:	d027      	beq.n	800161c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	210e      	movs	r1, #14
 80015d8:	438a      	bics	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_DMA_IRQHandler+0x160>)
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	221c      	movs	r2, #28
 80015e6:	4013      	ands	r3, r2
 80015e8:	2201      	movs	r2, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_DMA_IRQHandler+0x160>)
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2225      	movs	r2, #37	; 0x25
 80015fc:	2101      	movs	r1, #1
 80015fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2224      	movs	r2, #36	; 0x24
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	0010      	movs	r0, r2
 8001618:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46c0      	nop			; (mov r8, r8)
}
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40020000 	.word	0x40020000

08001628 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001638:	4694      	mov	ip, r2
 800163a:	4463      	add	r3, ip
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	001a      	movs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	001a      	movs	r2, r3
 800164a:	23ff      	movs	r3, #255	; 0xff
 800164c:	4013      	ands	r3, r2
 800164e:	3b08      	subs	r3, #8
 8001650:	2114      	movs	r1, #20
 8001652:	0018      	movs	r0, r3
 8001654:	f7fe fd58 	bl	8000108 <__udivsi3>
 8001658:	0003      	movs	r3, r0
 800165a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001660:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	221f      	movs	r2, #31
 8001666:	4013      	ands	r3, r2
 8001668:	2201      	movs	r2, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	10008200 	.word	0x10008200
 800167c:	40020880 	.word	0x40020880

08001680 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	4013      	ands	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001696:	4694      	mov	ip, r2
 8001698:	4463      	add	r3, ip
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	001a      	movs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b004      	add	sp, #16
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	1000823f 	.word	0x1000823f
 80016c4:	40020940 	.word	0x40020940

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e147      	b.n	8001968 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <HAL_GPIO_Init+0x28>
 80016ee:	e138      	b.n	8001962 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	4013      	ands	r3, r2
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	43da      	mvns	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	2201      	movs	r2, #1
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	2b03      	cmp	r3, #3
 8001774:	d017      	beq.n	80017a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2203      	movs	r2, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	58d3      	ldr	r3, [r2, r3]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2207      	movs	r2, #7
 80017c4:	4013      	ands	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2107      	movs	r1, #7
 80017de:	400b      	ands	r3, r1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	6939      	ldr	r1, [r7, #16]
 80017f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	401a      	ands	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	23c0      	movs	r3, #192	; 0xc0
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d100      	bne.n	800183c <HAL_GPIO_Init+0x174>
 800183a:	e092      	b.n	8001962 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800183c:	4a50      	ldr	r2, [pc, #320]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3318      	adds	r3, #24
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	589b      	ldr	r3, [r3, r2]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	220f      	movs	r2, #15
 8001854:	409a      	lsls	r2, r3
 8001856:	0013      	movs	r3, r2
 8001858:	43da      	mvns	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	23a0      	movs	r3, #160	; 0xa0
 8001864:	05db      	lsls	r3, r3, #23
 8001866:	429a      	cmp	r2, r3
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x1ca>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a45      	ldr	r2, [pc, #276]	; (8001984 <HAL_GPIO_Init+0x2bc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x1c6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a44      	ldr	r2, [pc, #272]	; (8001988 <HAL_GPIO_Init+0x2c0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x1c2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a43      	ldr	r2, [pc, #268]	; (800198c <HAL_GPIO_Init+0x2c4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x1be>
 8001882:	2303      	movs	r3, #3
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 8001886:	2305      	movs	r3, #5
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 8001892:	2300      	movs	r3, #0
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	2103      	movs	r1, #3
 8001898:	400a      	ands	r2, r1
 800189a:	00d2      	lsls	r2, r2, #3
 800189c:	4093      	lsls	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018a4:	4936      	ldr	r1, [pc, #216]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3318      	adds	r3, #24
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	035b      	lsls	r3, r3, #13
 80018ca:	4013      	ands	r3, r2
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43da      	mvns	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	039b      	lsls	r3, r3, #14
 80018f4:	4013      	ands	r3, r2
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 8001908:	2384      	movs	r3, #132	; 0x84
 800190a:	58d3      	ldr	r3, [r2, r3]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43da      	mvns	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	029b      	lsls	r3, r3, #10
 8001920:	4013      	ands	r3, r2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800192c:	4914      	ldr	r1, [pc, #80]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 800192e:	2284      	movs	r2, #132	; 0x84
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	58d3      	ldr	r3, [r2, r3]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	4013      	ands	r3, r2
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800195a:	4909      	ldr	r1, [pc, #36]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	40da      	lsrs	r2, r3
 8001970:	1e13      	subs	r3, r2, #0
 8001972:	d000      	beq.n	8001976 <HAL_GPIO_Init+0x2ae>
 8001974:	e6b0      	b.n	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b006      	add	sp, #24
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021800 	.word	0x40021800
 8001984:	50000400 	.word	0x50000400
 8001988:	50000800 	.word	0x50000800
 800198c:	50000c00 	.word	0x50000c00

08001990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800199e:	4013      	ands	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d11f      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	0013      	movs	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	189b      	adds	r3, r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4912      	ldr	r1, [pc, #72]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7fe fba0 	bl	8000108 <__udivsi3>
 80019c8:	0003      	movs	r3, r0
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ce:	e008      	b.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e001      	b.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e009      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	401a      	ands	r2, r3
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d0ed      	beq.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b004      	add	sp, #16
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40007000 	.word	0x40007000
 8001a04:	fffff9ff 	.word	0xfffff9ff
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	000f4240 	.word	0x000f4240

08001a10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	23e0      	movs	r3, #224	; 0xe0
 8001a1a:	01db      	lsls	r3, r3, #7
 8001a1c:	4013      	ands	r3, r2
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e2fe      	b.n	8002038 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d100      	bne.n	8001a46 <HAL_RCC_OscConfig+0x1e>
 8001a44:	e07c      	b.n	8001b40 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4bc3      	ldr	r3, [pc, #780]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2238      	movs	r2, #56	; 0x38
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4bc0      	ldr	r3, [pc, #768]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3e>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d10b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	4bb9      	ldr	r3, [pc, #740]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	4013      	ands	r3, r2
 8001a76:	d062      	beq.n	8001b3e <HAL_RCC_OscConfig+0x116>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d15e      	bne.n	8001b3e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e2d9      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
 8001a90:	4bb0      	ldr	r3, [pc, #704]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4baf      	ldr	r3, [pc, #700]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	0249      	lsls	r1, r1, #9
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e020      	b.n	8001ae2 <HAL_RCC_OscConfig+0xba>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	23a0      	movs	r3, #160	; 0xa0
 8001aa6:	02db      	lsls	r3, r3, #11
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d10e      	bne.n	8001aca <HAL_RCC_OscConfig+0xa2>
 8001aac:	4ba9      	ldr	r3, [pc, #676]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4ba8      	ldr	r3, [pc, #672]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	02c9      	lsls	r1, r1, #11
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	4ba6      	ldr	r3, [pc, #664]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4ba5      	ldr	r3, [pc, #660]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0249      	lsls	r1, r1, #9
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0xba>
 8001aca:	4ba2      	ldr	r3, [pc, #648]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4ba1      	ldr	r3, [pc, #644]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	49a1      	ldr	r1, [pc, #644]	; (8001d58 <HAL_RCC_OscConfig+0x330>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	4b9f      	ldr	r3, [pc, #636]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b9e      	ldr	r3, [pc, #632]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	499f      	ldr	r1, [pc, #636]	; (8001d5c <HAL_RCC_OscConfig+0x334>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d014      	beq.n	8001b14 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fb79 	bl	80011e0 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fb74 	bl	80011e0 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e298      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b06:	4b93      	ldr	r3, [pc, #588]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001b12:	e015      	b.n	8001b40 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fb64 	bl	80011e0 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb5f 	bl	80011e0 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e283      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b30:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	029b      	lsls	r3, r3, #10
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0xf6>
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d100      	bne.n	8001b4c <HAL_RCC_OscConfig+0x124>
 8001b4a:	e099      	b.n	8001c80 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2238      	movs	r2, #56	; 0x38
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b56:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d102      	bne.n	8001b6c <HAL_RCC_OscConfig+0x144>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d002      	beq.n	8001b72 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d135      	bne.n	8001bde <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x162>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e256      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a74      	ldr	r2, [pc, #464]	; (8001d60 <HAL_RCC_OscConfig+0x338>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ba6:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6e      	ldr	r2, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x33c>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bba:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0adb      	lsrs	r3, r3, #11
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a68      	ldr	r2, [pc, #416]	; (8001d68 <HAL_RCC_OscConfig+0x340>)
 8001bc6:	40da      	lsrs	r2, r3
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x344>)
 8001bca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x348>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff faa9 	bl	8001128 <HAL_InitTick>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d051      	beq.n	8001c7e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e22c      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d030      	beq.n	8001c48 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001be6:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5e      	ldr	r2, [pc, #376]	; (8001d64 <HAL_RCC_OscConfig+0x33c>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	0049      	lsls	r1, r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff faea 	bl	80011e0 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff fae5 	bl	80011e0 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e209      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a4a      	ldr	r2, [pc, #296]	; (8001d60 <HAL_RCC_OscConfig+0x338>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	021a      	lsls	r2, r3, #8
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e01b      	b.n	8001c80 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	4949      	ldr	r1, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x34c>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fac4 	bl	80011e0 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fabf 	bl	80011e0 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1e3      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x236>
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	d047      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c8a:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2238      	movs	r2, #56	; 0x38
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b18      	cmp	r3, #24
 8001c94:	d10a      	bne.n	8001cac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d03c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d138      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e1c5      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d019      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa8e 	bl	80011e0 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff fa89 	bl	80011e0 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1ad      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d0f1      	beq.n	8001cca <HAL_RCC_OscConfig+0x2a2>
 8001ce6:	e018      	b.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fa74 	bl	80011e0 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fa6f 	bl	80011e0 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e193      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	2202      	movs	r2, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d1f1      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2fe>
 8001d24:	e0c6      	b.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	231f      	movs	r3, #31
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2238      	movs	r2, #56	; 0x38
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d11e      	bne.n	8001d78 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d100      	bne.n	8001d46 <HAL_RCC_OscConfig+0x31e>
 8001d44:	e0b6      	b.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d000      	beq.n	8001d50 <HAL_RCC_OscConfig+0x328>
 8001d4e:	e0b1      	b.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e171      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	fffeffff 	.word	0xfffeffff
 8001d5c:	fffbffff 	.word	0xfffbffff
 8001d60:	ffff80ff 	.word	0xffff80ff
 8001d64:	ffffc7ff 	.word	0xffffc7ff
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004
 8001d74:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d78:	4bb1      	ldr	r3, [pc, #708]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	4013      	ands	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x360>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x362>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d011      	beq.n	8001db2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4bac      	ldr	r3, [pc, #688]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d92:	4bab      	ldr	r3, [pc, #684]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0549      	lsls	r1, r1, #21
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d9c:	4ba8      	ldr	r3, [pc, #672]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001daa:	231f      	movs	r3, #31
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db2:	4ba4      	ldr	r3, [pc, #656]	; (8002044 <HAL_RCC_OscConfig+0x61c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d11a      	bne.n	8001df4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbe:	4ba1      	ldr	r3, [pc, #644]	; (8002044 <HAL_RCC_OscConfig+0x61c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4ba0      	ldr	r3, [pc, #640]	; (8002044 <HAL_RCC_OscConfig+0x61c>)
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0049      	lsls	r1, r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fa08 	bl	80011e0 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7ff fa03 	bl	80011e0 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e127      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de8:	4b96      	ldr	r3, [pc, #600]	; (8002044 <HAL_RCC_OscConfig+0x61c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3e2>
 8001dfc:	4b90      	ldr	r3, [pc, #576]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e00:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e08:	e01c      	b.n	8001e44 <HAL_RCC_OscConfig+0x41c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x404>
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e16:	4b8a      	ldr	r3, [pc, #552]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e18:	2104      	movs	r1, #4
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e22:	4b87      	ldr	r3, [pc, #540]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x41c>
 8001e2c:	4b84      	ldr	r3, [pc, #528]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e30:	4b83      	ldr	r3, [pc, #524]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e38:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e3c:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	438a      	bics	r2, r1
 8001e42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d014      	beq.n	8001e76 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f9c8 	bl	80011e0 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff f9c3 	bl	80011e0 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a79      	ldr	r2, [pc, #484]	; (8002048 <HAL_RCC_OscConfig+0x620>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0e6      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6a:	4b75      	ldr	r3, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2202      	movs	r2, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x42e>
 8001e74:	e013      	b.n	8001e9e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff f9b3 	bl	80011e0 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7e:	e009      	b.n	8001e94 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff f9ae 	bl	80011e0 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	4a6f      	ldr	r2, [pc, #444]	; (8002048 <HAL_RCC_OscConfig+0x620>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0d1      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e9e:	231f      	movs	r3, #31
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b65      	ldr	r3, [pc, #404]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eac:	4b64      	ldr	r3, [pc, #400]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001eae:	4967      	ldr	r1, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <HAL_RCC_OscConfig+0x496>
 8001ebc:	e0bb      	b.n	8002036 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebe:	4b60      	ldr	r3, [pc, #384]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2238      	movs	r2, #56	; 0x38
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d100      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4a4>
 8001eca:	e07b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d156      	bne.n	8001f82 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001eda:	495d      	ldr	r1, [pc, #372]	; (8002050 <HAL_RCC_OscConfig+0x628>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f97e 	bl	80011e0 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7ff f979 	bl	80011e0 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e09d      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	049b      	lsls	r3, r3, #18
 8001f04:	4013      	ands	r3, r2
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_RCC_OscConfig+0x62c>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	431a      	orrs	r2, r3
 8001f36:	4b42      	ldr	r3, [pc, #264]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0449      	lsls	r1, r1, #17
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b3c      	ldr	r3, [pc, #240]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0549      	lsls	r1, r1, #21
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff f942 	bl	80011e0 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff f93d 	bl	80011e0 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e061      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	049b      	lsls	r3, r3, #18
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x53a>
 8001f80:	e059      	b.n	8002036 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001f88:	4931      	ldr	r1, [pc, #196]	; (8002050 <HAL_RCC_OscConfig+0x628>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f927 	bl	80011e0 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff f922 	bl	80011e0 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e046      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	049b      	lsls	r3, r3, #18
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001fbc:	4926      	ldr	r1, [pc, #152]	; (8002058 <HAL_RCC_OscConfig+0x630>)
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	e038      	b.n	8002036 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e033      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x618>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d126      	bne.n	8002032 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2270      	movs	r2, #112	; 0x70
 8001fe8:	401a      	ands	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d11f      	bne.n	8002032 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	23fe      	movs	r3, #254	; 0xfe
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d116      	bne.n	8002032 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	23f8      	movs	r3, #248	; 0xf8
 8002008:	039b      	lsls	r3, r3, #14
 800200a:	401a      	ands	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d10e      	bne.n	8002032 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	23e0      	movs	r3, #224	; 0xe0
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	401a      	ands	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	0f5b      	lsrs	r3, r3, #29
 8002028:	075a      	lsls	r2, r3, #29
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b008      	add	sp, #32
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
 8002048:	00001388 	.word	0x00001388
 800204c:	efffffff 	.word	0xefffffff
 8002050:	feffffff 	.word	0xfeffffff
 8002054:	11c1808c 	.word	0x11c1808c
 8002058:	eefefffc 	.word	0xeefefffc

0800205c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0e9      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2207      	movs	r2, #7
 8002076:	4013      	ands	r3, r2
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d91e      	bls.n	80020bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b73      	ldr	r3, [pc, #460]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2207      	movs	r2, #7
 8002084:	4393      	bics	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	4b70      	ldr	r3, [pc, #448]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002090:	f7ff f8a6 	bl	80011e0 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002098:	e009      	b.n	80020ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209a:	f7ff f8a1 	bl	80011e0 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	4a6a      	ldr	r2, [pc, #424]	; (8002250 <HAL_RCC_ClockConfig+0x1f4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0ca      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ae:	4b67      	ldr	r3, [pc, #412]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2207      	movs	r2, #7
 80020b4:	4013      	ands	r3, r2
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1ee      	bne.n	800209a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2202      	movs	r2, #2
 80020c2:	4013      	ands	r3, r2
 80020c4:	d015      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2204      	movs	r2, #4
 80020cc:	4013      	ands	r3, r2
 80020ce:	d006      	beq.n	80020de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020d0:	4b60      	ldr	r3, [pc, #384]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 80020d6:	21e0      	movs	r1, #224	; 0xe0
 80020d8:	01c9      	lsls	r1, r1, #7
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4a5d      	ldr	r2, [pc, #372]	; (8002258 <HAL_RCC_ClockConfig+0x1fc>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d057      	beq.n	80021ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	4013      	ands	r3, r2
 800210e:	d12b      	bne.n	8002168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e097      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d107      	bne.n	800212c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211c:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	049b      	lsls	r3, r3, #18
 8002124:	4013      	ands	r3, r2
 8002126:	d11f      	bne.n	8002168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e08b      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002134:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4013      	ands	r3, r2
 800213e:	d113      	bne.n	8002168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e07f      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d106      	bne.n	800215a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214c:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 800214e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d108      	bne.n	8002168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e074      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2202      	movs	r2, #2
 8002160:	4013      	ands	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e06d      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2207      	movs	r2, #7
 800216e:	4393      	bics	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217c:	f7ff f830 	bl	80011e0 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002184:	e009      	b.n	800219a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002186:	f7ff f82b 	bl	80011e0 <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_RCC_ClockConfig+0x1f4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e054      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2238      	movs	r2, #56	; 0x38
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1ec      	bne.n	8002186 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2207      	movs	r2, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d21e      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2207      	movs	r2, #7
 80021c0:	4393      	bics	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021cc:	f7ff f808 	bl	80011e0 <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d4:	e009      	b.n	80021ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d6:	f7ff f803 	bl	80011e0 <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_RCC_ClockConfig+0x1f4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e02c      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2207      	movs	r2, #7
 80021f0:	4013      	ands	r3, r2
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1ee      	bne.n	80021d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2204      	movs	r2, #4
 80021fe:	4013      	ands	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <HAL_RCC_ClockConfig+0x200>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002216:	f000 f829 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800221a:	0001      	movs	r1, r0
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCC_ClockConfig+0x1f8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	220f      	movs	r2, #15
 8002224:	401a      	ands	r2, r3
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_RCC_ClockConfig+0x204>)
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	58d3      	ldr	r3, [r2, r3]
 800222c:	221f      	movs	r2, #31
 800222e:	4013      	ands	r3, r2
 8002230:	000a      	movs	r2, r1
 8002232:	40da      	lsrs	r2, r3
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x208>)
 8002236:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x20c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0018      	movs	r0, r3
 800223e:	f7fe ff73 	bl	8001128 <HAL_InitTick>
 8002242:	0003      	movs	r3, r0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b004      	add	sp, #16
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40022000 	.word	0x40022000
 8002250:	00001388 	.word	0x00001388
 8002254:	40021000 	.word	0x40021000
 8002258:	fffff0ff 	.word	0xfffff0ff
 800225c:	ffff8fff 	.word	0xffff8fff
 8002260:	08005a48 	.word	0x08005a48
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002272:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	; 0x38
 8002278:	4013      	ands	r3, r2
 800227a:	d10f      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0adb      	lsrs	r3, r3, #11
 8002282:	2207      	movs	r2, #7
 8002284:	4013      	ands	r3, r2
 8002286:	2201      	movs	r2, #1
 8002288:	409a      	lsls	r2, r3
 800228a:	0013      	movs	r3, r2
 800228c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	4835      	ldr	r0, [pc, #212]	; (8002368 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002292:	f7fd ff39 	bl	8000108 <__udivsi3>
 8002296:	0003      	movs	r3, r0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	e05d      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800229c:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2238      	movs	r2, #56	; 0x38
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_RCC_GetSysClockFreq+0x100>)
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e054      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2238      	movs	r2, #56	; 0x38
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d138      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022ba:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2203      	movs	r2, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	2207      	movs	r2, #7
 80022cc:	4013      	ands	r3, r2
 80022ce:	3301      	adds	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	4824      	ldr	r0, [pc, #144]	; (800236c <HAL_RCC_GetSysClockFreq+0x100>)
 80022dc:	f7fd ff14 	bl	8000108 <__udivsi3>
 80022e0:	0003      	movs	r3, r0
 80022e2:	0019      	movs	r1, r3
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	227f      	movs	r2, #127	; 0x7f
 80022ec:	4013      	ands	r3, r2
 80022ee:	434b      	muls	r3, r1
 80022f0:	617b      	str	r3, [r7, #20]
        break;
 80022f2:	e00d      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	481c      	ldr	r0, [pc, #112]	; (8002368 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022f8:	f7fd ff06 	bl	8000108 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	0019      	movs	r1, r3
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	227f      	movs	r2, #127	; 0x7f
 8002308:	4013      	ands	r3, r2
 800230a:	434b      	muls	r3, r1
 800230c:	617b      	str	r3, [r7, #20]
        break;
 800230e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0f5b      	lsrs	r3, r3, #29
 8002316:	2207      	movs	r2, #7
 8002318:	4013      	ands	r3, r2
 800231a:	3301      	adds	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f7fd fef1 	bl	8000108 <__udivsi3>
 8002326:	0003      	movs	r3, r0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	e015      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2238      	movs	r2, #56	; 0x38
 8002332:	4013      	ands	r3, r2
 8002334:	2b20      	cmp	r3, #32
 8002336:	d103      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e00b      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2238      	movs	r2, #56	; 0x38
 8002346:	4013      	ands	r3, r2
 8002348:	2b18      	cmp	r3, #24
 800234a:	d103      	bne.n	8002354 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800234c:	23fa      	movs	r3, #250	; 0xfa
 800234e:	01db      	lsls	r3, r3, #7
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e001      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002358:	693b      	ldr	r3, [r7, #16]
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b006      	add	sp, #24
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	40021000 	.word	0x40021000
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_RCC_GetHCLKFreq+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002384:	b5b0      	push	{r4, r5, r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002388:	f7ff fff2 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 800238c:	0004      	movs	r4, r0
 800238e:	f7ff fb3f 	bl	8001a10 <LL_RCC_GetAPB1Prescaler>
 8002392:	0003      	movs	r3, r0
 8002394:	0b1a      	lsrs	r2, r3, #12
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	58d3      	ldr	r3, [r2, r3]
 800239c:	221f      	movs	r2, #31
 800239e:	4013      	ands	r3, r2
 80023a0:	40dc      	lsrs	r4, r3
 80023a2:	0023      	movs	r3, r4
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bdb0      	pop	{r4, r5, r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	08005a88 	.word	0x08005a88

080023b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023b8:	2313      	movs	r3, #19
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2312      	movs	r3, #18
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	029b      	lsls	r3, r3, #10
 80023d0:	4013      	ands	r3, r2
 80023d2:	d100      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023d4:	e0a3      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2011      	movs	r0, #17
 80023d8:	183b      	adds	r3, r7, r0
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4bc3      	ldr	r3, [pc, #780]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	4013      	ands	r3, r2
 80023e8:	d110      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4bc0      	ldr	r3, [pc, #768]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ee:	4bbf      	ldr	r3, [pc, #764]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0549      	lsls	r1, r1, #21
 80023f4:	430a      	orrs	r2, r1
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023f8:	4bbc      	ldr	r3, [pc, #752]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002406:	183b      	adds	r3, r7, r0
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240c:	4bb8      	ldr	r3, [pc, #736]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4bb7      	ldr	r3, [pc, #732]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	0049      	lsls	r1, r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800241a:	f7fe fee1 	bl	80011e0 <HAL_GetTick>
 800241e:	0003      	movs	r3, r0
 8002420:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002422:	e00b      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7fe fedc 	bl	80011e0 <HAL_GetTick>
 8002428:	0002      	movs	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d904      	bls.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002432:	2313      	movs	r3, #19
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2203      	movs	r2, #3
 8002438:	701a      	strb	r2, [r3, #0]
        break;
 800243a:	e005      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800243c:	4bac      	ldr	r3, [pc, #688]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4013      	ands	r3, r2
 8002446:	d0ed      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002448:	2313      	movs	r3, #19
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d154      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002452:	4ba6      	ldr	r3, [pc, #664]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4013      	ands	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d019      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	429a      	cmp	r2, r3
 800246c:	d014      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800246e:	4b9f      	ldr	r3, [pc, #636]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	4aa0      	ldr	r2, [pc, #640]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002474:	4013      	ands	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002478:	4b9c      	ldr	r3, [pc, #624]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800247c:	4b9b      	ldr	r3, [pc, #620]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	0249      	lsls	r1, r1, #9
 8002482:	430a      	orrs	r2, r1
 8002484:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002486:	4b99      	ldr	r3, [pc, #612]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800248a:	4b98      	ldr	r3, [pc, #608]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248c:	499a      	ldr	r1, [pc, #616]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800248e:	400a      	ands	r2, r1
 8002490:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002492:	4b96      	ldr	r3, [pc, #600]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2201      	movs	r2, #1
 800249c:	4013      	ands	r3, r2
 800249e:	d016      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fe9e 	bl	80011e0 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a8:	e00c      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fe99 	bl	80011e0 <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	4a91      	ldr	r2, [pc, #580]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d904      	bls.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80024ba:	2313      	movs	r3, #19
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2203      	movs	r2, #3
 80024c0:	701a      	strb	r2, [r3, #0]
            break;
 80024c2:	e004      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c4:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2202      	movs	r2, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d0ed      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80024ce:	2313      	movs	r3, #19
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d8:	4b84      	ldr	r3, [pc, #528]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	4a85      	ldr	r2, [pc, #532]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e6:	4b81      	ldr	r3, [pc, #516]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80024ec:	e00c      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ee:	2312      	movs	r3, #18
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2213      	movs	r2, #19
 80024f4:	18ba      	adds	r2, r7, r2
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e005      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fc:	2312      	movs	r3, #18
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2213      	movs	r2, #19
 8002502:	18ba      	adds	r2, r7, r2
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002508:	2311      	movs	r3, #17
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002518:	4979      	ldr	r1, [pc, #484]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800251a:	400a      	ands	r2, r1
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2201      	movs	r2, #1
 8002524:	4013      	ands	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002528:	4b70      	ldr	r3, [pc, #448]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	2203      	movs	r2, #3
 800252e:	4393      	bics	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002538:	430a      	orrs	r2, r1
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002546:	4b69      	ldr	r3, [pc, #420]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	220c      	movs	r2, #12
 800254c:	4393      	bics	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	4b65      	ldr	r3, [pc, #404]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002556:	430a      	orrs	r2, r1
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2210      	movs	r2, #16
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	4a66      	ldr	r2, [pc, #408]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002574:	430a      	orrs	r2, r1
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800258a:	4013      	ands	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	4b56      	ldr	r3, [pc, #344]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002594:	430a      	orrs	r2, r1
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025a4:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2220      	movs	r2, #32
 80025be:	4013      	ands	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	4013      	ands	r3, r2
 80025e0:	d015      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e2:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	0899      	lsrs	r1, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	05db      	lsls	r3, r3, #23
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002600:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	0249      	lsls	r1, r1, #9
 800260a:	430a      	orrs	r2, r1
 800260c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	031b      	lsls	r3, r3, #12
 8002616:	4013      	ands	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	4393      	bics	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800262a:	430a      	orrs	r2, r1
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	039b      	lsls	r3, r3, #14
 8002636:	4013      	ands	r3, r2
 8002638:	d016      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	4a35      	ldr	r2, [pc, #212]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264a:	430a      	orrs	r2, r1
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	03db      	lsls	r3, r3, #15
 8002656:	429a      	cmp	r2, r3
 8002658:	d106      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	0449      	lsls	r1, r1, #17
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	03db      	lsls	r3, r3, #15
 8002670:	4013      	ands	r3, r2
 8002672:	d016      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	4a27      	ldr	r2, [pc, #156]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002684:	430a      	orrs	r2, r1
 8002686:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	045b      	lsls	r3, r3, #17
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	0449      	lsls	r1, r1, #17
 800269e:	430a      	orrs	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4013      	ands	r3, r2
 80026ac:	d016      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	01db      	lsls	r3, r3, #7
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d106      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0249      	lsls	r1, r1, #9
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80026dc:	2312      	movs	r3, #18
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	781b      	ldrb	r3, [r3, #0]
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b006      	add	sp, #24
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	fffffcff 	.word	0xfffffcff
 80026f8:	fffeffff 	.word	0xfffeffff
 80026fc:	00001388 	.word	0x00001388
 8002700:	efffffff 	.word	0xefffffff
 8002704:	fffff3ff 	.word	0xfffff3ff
 8002708:	fff3ffff 	.word	0xfff3ffff
 800270c:	ffcfffff 	.word	0xffcfffff
 8002710:	ffffcfff 	.word	0xffffcfff
 8002714:	ffbfffff 	.word	0xffbfffff
 8002718:	feffffff 	.word	0xfeffffff
 800271c:	ffff3fff 	.word	0xffff3fff

08002720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e046      	b.n	80027c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2288      	movs	r2, #136	; 0x88
 8002736:	589b      	ldr	r3, [r3, r2]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2284      	movs	r2, #132	; 0x84
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	0018      	movs	r0, r3
 8002748:	f7fe fa10 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2288      	movs	r2, #136	; 0x88
 8002750:	2124      	movs	r1, #36	; 0x24
 8002752:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 faea 	bl	8002d48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	0018      	movs	r0, r3
 8002778:	f000 f828 	bl	80027cc <UART_SetConfig>
 800277c:	0003      	movs	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e01c      	b.n	80027c0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	490d      	ldr	r1, [pc, #52]	; (80027c8 <HAL_UART_Init+0xa8>)
 8002792:	400a      	ands	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	212a      	movs	r1, #42	; 0x2a
 80027a2:	438a      	bics	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fb79 	bl	8002eb0 <UART_CheckIdleState>
 80027be:	0003      	movs	r3, r0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	ffffb7ff 	.word	0xffffb7ff

080027cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b090      	sub	sp, #64	; 0x40
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027d4:	231a      	movs	r3, #26
 80027d6:	2220      	movs	r2, #32
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4aaf      	ldr	r2, [pc, #700]	; (8002abc <UART_SetConfig+0x2f0>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280a:	430b      	orrs	r3, r1
 800280c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4aaa      	ldr	r2, [pc, #680]	; (8002ac0 <UART_SetConfig+0x2f4>)
 8002816:	4013      	ands	r3, r2
 8002818:	0018      	movs	r0, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	68d9      	ldr	r1, [r3, #12]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	0003      	movs	r3, r0
 8002824:	430b      	orrs	r3, r1
 8002826:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4aa4      	ldr	r2, [pc, #656]	; (8002ac4 <UART_SetConfig+0x2f8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283e:	4313      	orrs	r3, r2
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a9f      	ldr	r2, [pc, #636]	; (8002ac8 <UART_SetConfig+0x2fc>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	430b      	orrs	r3, r1
 8002856:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	220f      	movs	r2, #15
 8002860:	4393      	bics	r3, r2
 8002862:	0018      	movs	r0, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	0003      	movs	r3, r0
 800286e:	430b      	orrs	r3, r1
 8002870:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a95      	ldr	r2, [pc, #596]	; (8002acc <UART_SetConfig+0x300>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d131      	bne.n	80028e0 <UART_SetConfig+0x114>
 800287c:	4b94      	ldr	r3, [pc, #592]	; (8002ad0 <UART_SetConfig+0x304>)
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	2203      	movs	r2, #3
 8002882:	4013      	ands	r3, r2
 8002884:	2b03      	cmp	r3, #3
 8002886:	d01d      	beq.n	80028c4 <UART_SetConfig+0xf8>
 8002888:	d823      	bhi.n	80028d2 <UART_SetConfig+0x106>
 800288a:	2b02      	cmp	r3, #2
 800288c:	d00c      	beq.n	80028a8 <UART_SetConfig+0xdc>
 800288e:	d820      	bhi.n	80028d2 <UART_SetConfig+0x106>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <UART_SetConfig+0xce>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d00e      	beq.n	80028b6 <UART_SetConfig+0xea>
 8002898:	e01b      	b.n	80028d2 <UART_SetConfig+0x106>
 800289a:	231b      	movs	r3, #27
 800289c:	2220      	movs	r2, #32
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	19db      	adds	r3, r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e0b4      	b.n	8002a12 <UART_SetConfig+0x246>
 80028a8:	231b      	movs	r3, #27
 80028aa:	2220      	movs	r2, #32
 80028ac:	189b      	adds	r3, r3, r2
 80028ae:	19db      	adds	r3, r3, r7
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e0ad      	b.n	8002a12 <UART_SetConfig+0x246>
 80028b6:	231b      	movs	r3, #27
 80028b8:	2220      	movs	r2, #32
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	19db      	adds	r3, r3, r7
 80028be:	2204      	movs	r2, #4
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e0a6      	b.n	8002a12 <UART_SetConfig+0x246>
 80028c4:	231b      	movs	r3, #27
 80028c6:	2220      	movs	r2, #32
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	19db      	adds	r3, r3, r7
 80028cc:	2208      	movs	r2, #8
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e09f      	b.n	8002a12 <UART_SetConfig+0x246>
 80028d2:	231b      	movs	r3, #27
 80028d4:	2220      	movs	r2, #32
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	19db      	adds	r3, r3, r7
 80028da:	2210      	movs	r2, #16
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e098      	b.n	8002a12 <UART_SetConfig+0x246>
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7b      	ldr	r2, [pc, #492]	; (8002ad4 <UART_SetConfig+0x308>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d131      	bne.n	800294e <UART_SetConfig+0x182>
 80028ea:	4b79      	ldr	r3, [pc, #484]	; (8002ad0 <UART_SetConfig+0x304>)
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	220c      	movs	r2, #12
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d01d      	beq.n	8002932 <UART_SetConfig+0x166>
 80028f6:	d823      	bhi.n	8002940 <UART_SetConfig+0x174>
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d00c      	beq.n	8002916 <UART_SetConfig+0x14a>
 80028fc:	d820      	bhi.n	8002940 <UART_SetConfig+0x174>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <UART_SetConfig+0x13c>
 8002902:	2b04      	cmp	r3, #4
 8002904:	d00e      	beq.n	8002924 <UART_SetConfig+0x158>
 8002906:	e01b      	b.n	8002940 <UART_SetConfig+0x174>
 8002908:	231b      	movs	r3, #27
 800290a:	2220      	movs	r2, #32
 800290c:	189b      	adds	r3, r3, r2
 800290e:	19db      	adds	r3, r3, r7
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e07d      	b.n	8002a12 <UART_SetConfig+0x246>
 8002916:	231b      	movs	r3, #27
 8002918:	2220      	movs	r2, #32
 800291a:	189b      	adds	r3, r3, r2
 800291c:	19db      	adds	r3, r3, r7
 800291e:	2202      	movs	r2, #2
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e076      	b.n	8002a12 <UART_SetConfig+0x246>
 8002924:	231b      	movs	r3, #27
 8002926:	2220      	movs	r2, #32
 8002928:	189b      	adds	r3, r3, r2
 800292a:	19db      	adds	r3, r3, r7
 800292c:	2204      	movs	r2, #4
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e06f      	b.n	8002a12 <UART_SetConfig+0x246>
 8002932:	231b      	movs	r3, #27
 8002934:	2220      	movs	r2, #32
 8002936:	189b      	adds	r3, r3, r2
 8002938:	19db      	adds	r3, r3, r7
 800293a:	2208      	movs	r2, #8
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e068      	b.n	8002a12 <UART_SetConfig+0x246>
 8002940:	231b      	movs	r3, #27
 8002942:	2220      	movs	r2, #32
 8002944:	189b      	adds	r3, r3, r2
 8002946:	19db      	adds	r3, r3, r7
 8002948:	2210      	movs	r2, #16
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e061      	b.n	8002a12 <UART_SetConfig+0x246>
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a61      	ldr	r2, [pc, #388]	; (8002ad8 <UART_SetConfig+0x30c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d106      	bne.n	8002966 <UART_SetConfig+0x19a>
 8002958:	231b      	movs	r3, #27
 800295a:	2220      	movs	r2, #32
 800295c:	189b      	adds	r3, r3, r2
 800295e:	19db      	adds	r3, r3, r7
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e055      	b.n	8002a12 <UART_SetConfig+0x246>
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a5c      	ldr	r2, [pc, #368]	; (8002adc <UART_SetConfig+0x310>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d106      	bne.n	800297e <UART_SetConfig+0x1b2>
 8002970:	231b      	movs	r3, #27
 8002972:	2220      	movs	r2, #32
 8002974:	189b      	adds	r3, r3, r2
 8002976:	19db      	adds	r3, r3, r7
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e049      	b.n	8002a12 <UART_SetConfig+0x246>
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a50      	ldr	r2, [pc, #320]	; (8002ac4 <UART_SetConfig+0x2f8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d13e      	bne.n	8002a06 <UART_SetConfig+0x23a>
 8002988:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <UART_SetConfig+0x304>)
 800298a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800298c:	23c0      	movs	r3, #192	; 0xc0
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	4013      	ands	r3, r2
 8002992:	22c0      	movs	r2, #192	; 0xc0
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	4293      	cmp	r3, r2
 8002998:	d027      	beq.n	80029ea <UART_SetConfig+0x21e>
 800299a:	22c0      	movs	r2, #192	; 0xc0
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	4293      	cmp	r3, r2
 80029a0:	d82a      	bhi.n	80029f8 <UART_SetConfig+0x22c>
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d011      	beq.n	80029ce <UART_SetConfig+0x202>
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d822      	bhi.n	80029f8 <UART_SetConfig+0x22c>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <UART_SetConfig+0x1f4>
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	00d2      	lsls	r2, r2, #3
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00e      	beq.n	80029dc <UART_SetConfig+0x210>
 80029be:	e01b      	b.n	80029f8 <UART_SetConfig+0x22c>
 80029c0:	231b      	movs	r3, #27
 80029c2:	2220      	movs	r2, #32
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	19db      	adds	r3, r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e021      	b.n	8002a12 <UART_SetConfig+0x246>
 80029ce:	231b      	movs	r3, #27
 80029d0:	2220      	movs	r2, #32
 80029d2:	189b      	adds	r3, r3, r2
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	2202      	movs	r2, #2
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e01a      	b.n	8002a12 <UART_SetConfig+0x246>
 80029dc:	231b      	movs	r3, #27
 80029de:	2220      	movs	r2, #32
 80029e0:	189b      	adds	r3, r3, r2
 80029e2:	19db      	adds	r3, r3, r7
 80029e4:	2204      	movs	r2, #4
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e013      	b.n	8002a12 <UART_SetConfig+0x246>
 80029ea:	231b      	movs	r3, #27
 80029ec:	2220      	movs	r2, #32
 80029ee:	189b      	adds	r3, r3, r2
 80029f0:	19db      	adds	r3, r3, r7
 80029f2:	2208      	movs	r2, #8
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e00c      	b.n	8002a12 <UART_SetConfig+0x246>
 80029f8:	231b      	movs	r3, #27
 80029fa:	2220      	movs	r2, #32
 80029fc:	189b      	adds	r3, r3, r2
 80029fe:	19db      	adds	r3, r3, r7
 8002a00:	2210      	movs	r2, #16
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <UART_SetConfig+0x246>
 8002a06:	231b      	movs	r3, #27
 8002a08:	2220      	movs	r2, #32
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	19db      	adds	r3, r3, r7
 8002a0e:	2210      	movs	r2, #16
 8002a10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2b      	ldr	r2, [pc, #172]	; (8002ac4 <UART_SetConfig+0x2f8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d000      	beq.n	8002a1e <UART_SetConfig+0x252>
 8002a1c:	e0a9      	b.n	8002b72 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a1e:	231b      	movs	r3, #27
 8002a20:	2220      	movs	r2, #32
 8002a22:	189b      	adds	r3, r3, r2
 8002a24:	19db      	adds	r3, r3, r7
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d015      	beq.n	8002a58 <UART_SetConfig+0x28c>
 8002a2c:	dc18      	bgt.n	8002a60 <UART_SetConfig+0x294>
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d00d      	beq.n	8002a4e <UART_SetConfig+0x282>
 8002a32:	dc15      	bgt.n	8002a60 <UART_SetConfig+0x294>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <UART_SetConfig+0x272>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d005      	beq.n	8002a48 <UART_SetConfig+0x27c>
 8002a3c:	e010      	b.n	8002a60 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a3e:	f7ff fca1 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 8002a42:	0003      	movs	r3, r0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a46:	e014      	b.n	8002a72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <UART_SetConfig+0x314>)
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a4c:	e011      	b.n	8002a72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4e:	f7ff fc0d 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002a52:	0003      	movs	r3, r0
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a56:	e00c      	b.n	8002a72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a5e:	e008      	b.n	8002a72 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002a64:	231a      	movs	r3, #26
 8002a66:	2220      	movs	r2, #32
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19db      	adds	r3, r3, r7
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
        break;
 8002a70:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d100      	bne.n	8002a7a <UART_SetConfig+0x2ae>
 8002a78:	e14b      	b.n	8002d12 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <UART_SetConfig+0x318>)
 8002a80:	0052      	lsls	r2, r2, #1
 8002a82:	5ad3      	ldrh	r3, [r2, r3]
 8002a84:	0019      	movs	r1, r3
 8002a86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a88:	f7fd fb3e 	bl	8000108 <__udivsi3>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	0013      	movs	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	189b      	adds	r3, r3, r2
 8002a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d305      	bcc.n	8002aac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d91d      	bls.n	8002ae8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002aac:	231a      	movs	r3, #26
 8002aae:	2220      	movs	r2, #32
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e12b      	b.n	8002d12 <UART_SetConfig+0x546>
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	cfff69f3 	.word	0xcfff69f3
 8002ac0:	ffffcfff 	.word	0xffffcfff
 8002ac4:	40008000 	.word	0x40008000
 8002ac8:	11fff4ff 	.word	0x11fff4ff
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40004400 	.word	0x40004400
 8002ad8:	40004800 	.word	0x40004800
 8002adc:	40004c00 	.word	0x40004c00
 8002ae0:	00f42400 	.word	0x00f42400
 8002ae4:	08005aa8 	.word	0x08005aa8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af4:	4b92      	ldr	r3, [pc, #584]	; (8002d40 <UART_SetConfig+0x574>)
 8002af6:	0052      	lsls	r2, r2, #1
 8002af8:	5ad3      	ldrh	r3, [r2, r3]
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	69b8      	ldr	r0, [r7, #24]
 8002b06:	69f9      	ldr	r1, [r7, #28]
 8002b08:	f7fd fc74 	bl	80003f4 <__aeabi_uldivmod>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	000b      	movs	r3, r1
 8002b10:	0e11      	lsrs	r1, r2, #24
 8002b12:	021d      	lsls	r5, r3, #8
 8002b14:	430d      	orrs	r5, r1
 8002b16:	0214      	lsls	r4, r2, #8
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68b8      	ldr	r0, [r7, #8]
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	1900      	adds	r0, r0, r4
 8002b2a:	4169      	adcs	r1, r5
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f7fd fc5b 	bl	80003f4 <__aeabi_uldivmod>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	000b      	movs	r3, r1
 8002b42:	0013      	movs	r3, r2
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b48:	23c0      	movs	r3, #192	; 0xc0
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d309      	bcc.n	8002b64 <UART_SetConfig+0x398>
 8002b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	035b      	lsls	r3, r3, #13
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d204      	bcs.n	8002b64 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	e0d6      	b.n	8002d12 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002b64:	231a      	movs	r3, #26
 8002b66:	2220      	movs	r2, #32
 8002b68:	189b      	adds	r3, r3, r2
 8002b6a:	19db      	adds	r3, r3, r7
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e0cf      	b.n	8002d12 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d000      	beq.n	8002b80 <UART_SetConfig+0x3b4>
 8002b7e:	e070      	b.n	8002c62 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002b80:	231b      	movs	r3, #27
 8002b82:	2220      	movs	r2, #32
 8002b84:	189b      	adds	r3, r3, r2
 8002b86:	19db      	adds	r3, r3, r7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d015      	beq.n	8002bba <UART_SetConfig+0x3ee>
 8002b8e:	dc18      	bgt.n	8002bc2 <UART_SetConfig+0x3f6>
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d00d      	beq.n	8002bb0 <UART_SetConfig+0x3e4>
 8002b94:	dc15      	bgt.n	8002bc2 <UART_SetConfig+0x3f6>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <UART_SetConfig+0x3d4>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d005      	beq.n	8002baa <UART_SetConfig+0x3de>
 8002b9e:	e010      	b.n	8002bc2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba0:	f7ff fbf0 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ba8:	e014      	b.n	8002bd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002baa:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <UART_SetConfig+0x578>)
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bae:	e011      	b.n	8002bd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb0:	f7ff fb5c 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bb8:	e00c      	b.n	8002bd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bc0:	e008      	b.n	8002bd4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002bc6:	231a      	movs	r3, #26
 8002bc8:	2220      	movs	r2, #32
 8002bca:	189b      	adds	r3, r3, r2
 8002bcc:	19db      	adds	r3, r3, r7
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
        break;
 8002bd2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <UART_SetConfig+0x410>
 8002bda:	e09a      	b.n	8002d12 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be0:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <UART_SetConfig+0x574>)
 8002be2:	0052      	lsls	r2, r2, #1
 8002be4:	5ad3      	ldrh	r3, [r2, r3]
 8002be6:	0019      	movs	r1, r3
 8002be8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bea:	f7fd fa8d 	bl	8000108 <__udivsi3>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	005a      	lsls	r2, r3, #1
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	18d2      	adds	r2, r2, r3
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	0019      	movs	r1, r3
 8002c00:	0010      	movs	r0, r2
 8002c02:	f7fd fa81 	bl	8000108 <__udivsi3>
 8002c06:	0003      	movs	r3, r0
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d921      	bls.n	8002c54 <UART_SetConfig+0x488>
 8002c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	025b      	lsls	r3, r3, #9
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d21c      	bcs.n	8002c54 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	200e      	movs	r0, #14
 8002c20:	2420      	movs	r4, #32
 8002c22:	1903      	adds	r3, r0, r4
 8002c24:	19db      	adds	r3, r3, r7
 8002c26:	210f      	movs	r1, #15
 8002c28:	438a      	bics	r2, r1
 8002c2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2207      	movs	r2, #7
 8002c34:	4013      	ands	r3, r2
 8002c36:	b299      	uxth	r1, r3
 8002c38:	1903      	adds	r3, r0, r4
 8002c3a:	19db      	adds	r3, r3, r7
 8002c3c:	1902      	adds	r2, r0, r4
 8002c3e:	19d2      	adds	r2, r2, r7
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1902      	adds	r2, r0, r4
 8002c4c:	19d2      	adds	r2, r2, r7
 8002c4e:	8812      	ldrh	r2, [r2, #0]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	e05e      	b.n	8002d12 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002c54:	231a      	movs	r3, #26
 8002c56:	2220      	movs	r2, #32
 8002c58:	189b      	adds	r3, r3, r2
 8002c5a:	19db      	adds	r3, r3, r7
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e057      	b.n	8002d12 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c62:	231b      	movs	r3, #27
 8002c64:	2220      	movs	r2, #32
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d015      	beq.n	8002c9c <UART_SetConfig+0x4d0>
 8002c70:	dc18      	bgt.n	8002ca4 <UART_SetConfig+0x4d8>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d00d      	beq.n	8002c92 <UART_SetConfig+0x4c6>
 8002c76:	dc15      	bgt.n	8002ca4 <UART_SetConfig+0x4d8>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <UART_SetConfig+0x4b6>
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d005      	beq.n	8002c8c <UART_SetConfig+0x4c0>
 8002c80:	e010      	b.n	8002ca4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7ff fb7f 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 8002c86:	0003      	movs	r3, r0
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c8a:	e014      	b.n	8002cb6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <UART_SetConfig+0x578>)
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c90:	e011      	b.n	8002cb6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c92:	f7ff faeb 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002c96:	0003      	movs	r3, r0
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c9a:	e00c      	b.n	8002cb6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ca2:	e008      	b.n	8002cb6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ca8:	231a      	movs	r3, #26
 8002caa:	2220      	movs	r2, #32
 8002cac:	189b      	adds	r3, r3, r2
 8002cae:	19db      	adds	r3, r3, r7
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
        break;
 8002cb4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d02a      	beq.n	8002d12 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <UART_SetConfig+0x574>)
 8002cc2:	0052      	lsls	r2, r2, #1
 8002cc4:	5ad3      	ldrh	r3, [r2, r3]
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cca:	f7fd fa1d 	bl	8000108 <__udivsi3>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	18d2      	adds	r2, r2, r3
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0019      	movs	r1, r3
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	f7fd fa11 	bl	8000108 <__udivsi3>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d90a      	bls.n	8002d06 <UART_SetConfig+0x53a>
 8002cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	025b      	lsls	r3, r3, #9
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d205      	bcs.n	8002d06 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	e005      	b.n	8002d12 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d06:	231a      	movs	r3, #26
 8002d08:	2220      	movs	r2, #32
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	19db      	adds	r3, r3, r7
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	226a      	movs	r2, #106	; 0x6a
 8002d16:	2101      	movs	r1, #1
 8002d18:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	2268      	movs	r2, #104	; 0x68
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	2200      	movs	r2, #0
 8002d26:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d2e:	231a      	movs	r3, #26
 8002d30:	2220      	movs	r2, #32
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	19db      	adds	r3, r3, r7
 8002d36:	781b      	ldrb	r3, [r3, #0]
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b010      	add	sp, #64	; 0x40
 8002d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d40:	08005aa8 	.word	0x08005aa8
 8002d44:	00f42400 	.word	0x00f42400

08002d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	2208      	movs	r2, #8
 8002d56:	4013      	ands	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a4a      	ldr	r2, [pc, #296]	; (8002e8c <UART_AdvFeatureConfig+0x144>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a43      	ldr	r2, [pc, #268]	; (8002e90 <UART_AdvFeatureConfig+0x148>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <UART_AdvFeatureConfig+0x14c>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	2204      	movs	r2, #4
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <UART_AdvFeatureConfig+0x150>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	2210      	movs	r2, #16
 8002dde:	4013      	ands	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a2c      	ldr	r2, [pc, #176]	; (8002e9c <UART_AdvFeatureConfig+0x154>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	2220      	movs	r2, #32
 8002e00:	4013      	ands	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <UART_AdvFeatureConfig+0x158>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	4013      	ands	r3, r2
 8002e24:	d01d      	beq.n	8002e62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <UART_AdvFeatureConfig+0x15c>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	035b      	lsls	r3, r3, #13
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d10b      	bne.n	8002e62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <UART_AdvFeatureConfig+0x160>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <UART_AdvFeatureConfig+0x164>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  }
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	ffff7fff 	.word	0xffff7fff
 8002e90:	fffdffff 	.word	0xfffdffff
 8002e94:	fffeffff 	.word	0xfffeffff
 8002e98:	fffbffff 	.word	0xfffbffff
 8002e9c:	ffffefff 	.word	0xffffefff
 8002ea0:	ffffdfff 	.word	0xffffdfff
 8002ea4:	ffefffff 	.word	0xffefffff
 8002ea8:	ff9fffff 	.word	0xff9fffff
 8002eac:	fff7ffff 	.word	0xfff7ffff

08002eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b092      	sub	sp, #72	; 0x48
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2290      	movs	r2, #144	; 0x90
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ec0:	f7fe f98e 	bl	80011e0 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2208      	movs	r2, #8
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d12d      	bne.n	8002f32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	0391      	lsls	r1, r2, #14
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4a47      	ldr	r2, [pc, #284]	; (8002ffc <UART_CheckIdleState+0x14c>)
 8002ee0:	9200      	str	r2, [sp, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f000 f88e 	bl	8003004 <UART_WaitOnFlagUntilTimeout>
 8002ee8:	1e03      	subs	r3, r0, #0
 8002eea:	d022      	beq.n	8002f32 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	f383 8810 	msr	PRIMASK, r3
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	438a      	bics	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2288      	movs	r2, #136	; 0x88
 8002f22:	2120      	movs	r1, #32
 8002f24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2284      	movs	r2, #132	; 0x84
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e060      	b.n	8002ff4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d146      	bne.n	8002fce <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	03d1      	lsls	r1, r2, #15
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	; (8002ffc <UART_CheckIdleState+0x14c>)
 8002f4a:	9200      	str	r2, [sp, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f000 f859 	bl	8003004 <UART_WaitOnFlagUntilTimeout>
 8002f52:	1e03      	subs	r3, r0, #0
 8002f54:	d03b      	beq.n	8002fce <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f60:	2301      	movs	r3, #1
 8002f62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f383 8810 	msr	PRIMASK, r3
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4922      	ldr	r1, [pc, #136]	; (8003000 <UART_CheckIdleState+0x150>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f88:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f8e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
 8002f92:	2301      	movs	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f383 8810 	msr	PRIMASK, r3
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	438a      	bics	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f383 8810 	msr	PRIMASK, r3
}
 8002fb8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	228c      	movs	r2, #140	; 0x8c
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2284      	movs	r2, #132	; 0x84
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e012      	b.n	8002ff4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2288      	movs	r2, #136	; 0x88
 8002fd2:	2120      	movs	r1, #32
 8002fd4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	228c      	movs	r2, #140	; 0x8c
 8002fda:	2120      	movs	r1, #32
 8002fdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2284      	movs	r2, #132	; 0x84
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b010      	add	sp, #64	; 0x40
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	01ffffff 	.word	0x01ffffff
 8003000:	fffffedf 	.word	0xfffffedf

08003004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003014:	e051      	b.n	80030ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3301      	adds	r3, #1
 800301a:	d04e      	beq.n	80030ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7fe f8e0 	bl	80011e0 <HAL_GetTick>
 8003020:	0002      	movs	r2, r0
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	429a      	cmp	r2, r3
 800302a:	d302      	bcc.n	8003032 <UART_WaitOnFlagUntilTimeout+0x2e>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e051      	b.n	80030da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2204      	movs	r2, #4
 800303e:	4013      	ands	r3, r2
 8003040:	d03b      	beq.n	80030ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d038      	beq.n	80030ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d035      	beq.n	80030ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2208      	movs	r2, #8
 8003056:	4013      	ands	r3, r2
 8003058:	2b08      	cmp	r3, #8
 800305a:	d111      	bne.n	8003080 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2208      	movs	r2, #8
 8003062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	0018      	movs	r0, r3
 8003068:	f000 f83c 	bl	80030e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2290      	movs	r2, #144	; 0x90
 8003070:	2108      	movs	r1, #8
 8003072:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2284      	movs	r2, #132	; 0x84
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e02c      	b.n	80030da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	401a      	ands	r2, r3
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	429a      	cmp	r2, r3
 8003092:	d112      	bne.n	80030ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2280      	movs	r2, #128	; 0x80
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 f81f 	bl	80030e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2290      	movs	r2, #144	; 0x90
 80030aa:	2120      	movs	r1, #32
 80030ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2284      	movs	r2, #132	; 0x84
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e00f      	b.n	80030da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	4013      	ands	r3, r2
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	425a      	negs	r2, r3
 80030ca:	4153      	adcs	r3, r2
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	001a      	movs	r2, r3
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d09e      	beq.n	8003016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ec:	f3ef 8310 	mrs	r3, PRIMASK
 80030f0:	617b      	str	r3, [r7, #20]
  return(result);
 80030f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
 80030f6:	2301      	movs	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f383 8810 	msr	PRIMASK, r3
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4926      	ldr	r1, [pc, #152]	; (80031a8 <UART_EndRxTransfer+0xc4>)
 800310e:	400a      	ands	r2, r1
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003114:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f383 8810 	msr	PRIMASK, r3
}
 800311c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311e:	f3ef 8310 	mrs	r3, PRIMASK
 8003122:	623b      	str	r3, [r7, #32]
  return(result);
 8003124:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
 8003128:	2301      	movs	r3, #1
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f383 8810 	msr	PRIMASK, r3
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	491b      	ldr	r1, [pc, #108]	; (80031ac <UART_EndRxTransfer+0xc8>)
 8003140:	400a      	ands	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	f383 8810 	msr	PRIMASK, r3
}
 800314e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d118      	bne.n	800318a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003158:	f3ef 8310 	mrs	r3, PRIMASK
 800315c:	60bb      	str	r3, [r7, #8]
  return(result);
 800315e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003162:	2301      	movs	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	46c0      	nop			; (mov r8, r8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2110      	movs	r1, #16
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f383 8810 	msr	PRIMASK, r3
}
 8003188:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	228c      	movs	r2, #140	; 0x8c
 800318e:	2120      	movs	r1, #32
 8003190:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b00e      	add	sp, #56	; 0x38
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	fffffedf 	.word	0xfffffedf
 80031ac:	effffffe 	.word	0xeffffffe

080031b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2284      	movs	r2, #132	; 0x84
 80031bc:	5c9b      	ldrb	r3, [r3, r2]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e027      	b.n	8003216 <HAL_UARTEx_DisableFifoMode+0x66>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2284      	movs	r2, #132	; 0x84
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2288      	movs	r2, #136	; 0x88
 80031d2:	2124      	movs	r1, #36	; 0x24
 80031d4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	438a      	bics	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <HAL_UARTEx_DisableFifoMode+0x70>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2288      	movs	r2, #136	; 0x88
 8003208:	2120      	movs	r1, #32
 800320a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2284      	movs	r2, #132	; 0x84
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	dfffffff 	.word	0xdfffffff

08003224 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2284      	movs	r2, #132	; 0x84
 8003232:	5c9b      	ldrb	r3, [r3, r2]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e02e      	b.n	800329a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2284      	movs	r2, #132	; 0x84
 8003240:	2101      	movs	r1, #1
 8003242:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2288      	movs	r2, #136	; 0x88
 8003248:	2124      	movs	r1, #36	; 0x24
 800324a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	08d9      	lsrs	r1, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f000 f854 	bl	8003328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2288      	movs	r2, #136	; 0x88
 800328c:	2120      	movs	r1, #32
 800328e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2284      	movs	r2, #132	; 0x84
 8003294:	2100      	movs	r1, #0
 8003296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2284      	movs	r2, #132	; 0x84
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e02f      	b.n	800331c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2284      	movs	r2, #132	; 0x84
 80032c0:	2101      	movs	r1, #1
 80032c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2288      	movs	r2, #136	; 0x88
 80032c8:	2124      	movs	r1, #36	; 0x24
 80032ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2101      	movs	r1, #1
 80032e0:	438a      	bics	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 f813 	bl	8003328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2288      	movs	r2, #136	; 0x88
 800330e:	2120      	movs	r1, #32
 8003310:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2284      	movs	r2, #132	; 0x84
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b004      	add	sp, #16
 8003322:	bd80      	pop	{r7, pc}
 8003324:	f1ffffff 	.word	0xf1ffffff

08003328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	226a      	movs	r2, #106	; 0x6a
 800333c:	2101      	movs	r1, #1
 800333e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2268      	movs	r2, #104	; 0x68
 8003344:	2101      	movs	r1, #1
 8003346:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003348:	e043      	b.n	80033d2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800334a:	260f      	movs	r6, #15
 800334c:	19bb      	adds	r3, r7, r6
 800334e:	2208      	movs	r2, #8
 8003350:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003352:	200e      	movs	r0, #14
 8003354:	183b      	adds	r3, r7, r0
 8003356:	2208      	movs	r2, #8
 8003358:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	0e5b      	lsrs	r3, r3, #25
 8003362:	b2da      	uxtb	r2, r3
 8003364:	240d      	movs	r4, #13
 8003366:	193b      	adds	r3, r7, r4
 8003368:	2107      	movs	r1, #7
 800336a:	400a      	ands	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	0f5b      	lsrs	r3, r3, #29
 8003376:	b2da      	uxtb	r2, r3
 8003378:	250c      	movs	r5, #12
 800337a:	197b      	adds	r3, r7, r5
 800337c:	2107      	movs	r1, #7
 800337e:	400a      	ands	r2, r1
 8003380:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003382:	183b      	adds	r3, r7, r0
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	197a      	adds	r2, r7, r5
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	4914      	ldr	r1, [pc, #80]	; (80033dc <UARTEx_SetNbDataToProcess+0xb4>)
 800338c:	5c8a      	ldrb	r2, [r1, r2]
 800338e:	435a      	muls	r2, r3
 8003390:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003392:	197b      	adds	r3, r7, r5
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800339a:	0019      	movs	r1, r3
 800339c:	f7fc ff3e 	bl	800021c <__divsi3>
 80033a0:	0003      	movs	r3, r0
 80033a2:	b299      	uxth	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	226a      	movs	r2, #106	; 0x6a
 80033a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033aa:	19bb      	adds	r3, r7, r6
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	193a      	adds	r2, r7, r4
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	490a      	ldr	r1, [pc, #40]	; (80033dc <UARTEx_SetNbDataToProcess+0xb4>)
 80033b4:	5c8a      	ldrb	r2, [r1, r2]
 80033b6:	435a      	muls	r2, r3
 80033b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <UARTEx_SetNbDataToProcess+0xb8>)
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033c2:	0019      	movs	r1, r3
 80033c4:	f7fc ff2a 	bl	800021c <__divsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	b299      	uxth	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2268      	movs	r2, #104	; 0x68
 80033d0:	5299      	strh	r1, [r3, r2]
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b005      	add	sp, #20
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	08005ac0 	.word	0x08005ac0
 80033e0:	08005ac8 	.word	0x08005ac8

080033e4 <__NVIC_SetPriority>:
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	0002      	movs	r2, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b7f      	cmp	r3, #127	; 0x7f
 80033f8:	d828      	bhi.n	800344c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033fa:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <__NVIC_SetPriority+0xd4>)
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b25b      	sxtb	r3, r3
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	33c0      	adds	r3, #192	; 0xc0
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	589b      	ldr	r3, [r3, r2]
 800340a:	1dfa      	adds	r2, r7, #7
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	0011      	movs	r1, r2
 8003410:	2203      	movs	r2, #3
 8003412:	400a      	ands	r2, r1
 8003414:	00d2      	lsls	r2, r2, #3
 8003416:	21ff      	movs	r1, #255	; 0xff
 8003418:	4091      	lsls	r1, r2
 800341a:	000a      	movs	r2, r1
 800341c:	43d2      	mvns	r2, r2
 800341e:	401a      	ands	r2, r3
 8003420:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	401a      	ands	r2, r3
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	0018      	movs	r0, r3
 8003430:	2303      	movs	r3, #3
 8003432:	4003      	ands	r3, r0
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003438:	481f      	ldr	r0, [pc, #124]	; (80034b8 <__NVIC_SetPriority+0xd4>)
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b25b      	sxtb	r3, r3
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	430a      	orrs	r2, r1
 8003444:	33c0      	adds	r3, #192	; 0xc0
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	501a      	str	r2, [r3, r0]
}
 800344a:	e031      	b.n	80034b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <__NVIC_SetPriority+0xd8>)
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0019      	movs	r1, r3
 8003454:	230f      	movs	r3, #15
 8003456:	400b      	ands	r3, r1
 8003458:	3b08      	subs	r3, #8
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3306      	adds	r3, #6
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	18d3      	adds	r3, r2, r3
 8003462:	3304      	adds	r3, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	1dfa      	adds	r2, r7, #7
 8003468:	7812      	ldrb	r2, [r2, #0]
 800346a:	0011      	movs	r1, r2
 800346c:	2203      	movs	r2, #3
 800346e:	400a      	ands	r2, r1
 8003470:	00d2      	lsls	r2, r2, #3
 8003472:	21ff      	movs	r1, #255	; 0xff
 8003474:	4091      	lsls	r1, r2
 8003476:	000a      	movs	r2, r1
 8003478:	43d2      	mvns	r2, r2
 800347a:	401a      	ands	r2, r3
 800347c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	401a      	ands	r2, r3
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	0018      	movs	r0, r3
 800348c:	2303      	movs	r3, #3
 800348e:	4003      	ands	r3, r0
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003494:	4809      	ldr	r0, [pc, #36]	; (80034bc <__NVIC_SetPriority+0xd8>)
 8003496:	1dfb      	adds	r3, r7, #7
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	001c      	movs	r4, r3
 800349c:	230f      	movs	r3, #15
 800349e:	4023      	ands	r3, r4
 80034a0:	3b08      	subs	r3, #8
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	430a      	orrs	r2, r1
 80034a6:	3306      	adds	r3, #6
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	18c3      	adds	r3, r0, r3
 80034ac:	3304      	adds	r3, #4
 80034ae:	601a      	str	r2, [r3, #0]
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b003      	add	sp, #12
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	e000e100 	.word	0xe000e100
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034c4:	2305      	movs	r3, #5
 80034c6:	425b      	negs	r3, r3
 80034c8:	2100      	movs	r1, #0
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7ff ff8a 	bl	80033e4 <__NVIC_SetPriority>
#endif
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034de:	f3ef 8305 	mrs	r3, IPSR
 80034e2:	603b      	str	r3, [r7, #0]
  return(result);
 80034e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80034ea:	2306      	movs	r3, #6
 80034ec:	425b      	negs	r3, r3
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	e00c      	b.n	800350c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <osKernelInitialize+0x40>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <osKernelInitialize+0x40>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003500:	2300      	movs	r3, #0
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	e002      	b.n	800350c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003506:	2301      	movs	r3, #1
 8003508:	425b      	negs	r3, r3
 800350a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800350c:	687b      	ldr	r3, [r7, #4]
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b002      	add	sp, #8
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	200004e8 	.word	0x200004e8

0800351c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003522:	f3ef 8305 	mrs	r3, IPSR
 8003526:	603b      	str	r3, [r7, #0]
  return(result);
 8003528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <osKernelStart+0x1a>
    stat = osErrorISR;
 800352e:	2306      	movs	r3, #6
 8003530:	425b      	negs	r3, r3
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	e010      	b.n	8003558 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <osKernelStart+0x48>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d109      	bne.n	8003552 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800353e:	f7ff ffbf 	bl	80034c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <osKernelStart+0x48>)
 8003544:	2202      	movs	r2, #2
 8003546:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003548:	f000 ff6e 	bl	8004428 <vTaskStartScheduler>
      stat = osOK;
 800354c:	2300      	movs	r3, #0
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	e002      	b.n	8003558 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003552:	2301      	movs	r3, #1
 8003554:	425b      	negs	r3, r3
 8003556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003558:	687b      	ldr	r3, [r7, #4]
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	200004e8 	.word	0x200004e8

08003568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af04      	add	r7, sp, #16
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003578:	f3ef 8305 	mrs	r3, IPSR
 800357c:	617b      	str	r3, [r7, #20]
  return(result);
 800357e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003580:	2b00      	cmp	r3, #0
 8003582:	d000      	beq.n	8003586 <osThreadNew+0x1e>
 8003584:	e081      	b.n	800368a <osThreadNew+0x122>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d100      	bne.n	800358e <osThreadNew+0x26>
 800358c:	e07d      	b.n	800368a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003592:	2318      	movs	r3, #24
 8003594:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800359a:	2301      	movs	r3, #1
 800359c:	425b      	negs	r3, r3
 800359e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <osThreadNew+0x4c>
        name = attr->name;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <osThreadNew+0x70>
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b38      	cmp	r3, #56	; 0x38
 80035cc:	d804      	bhi.n	80035d8 <osThreadNew+0x70>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	4013      	ands	r3, r2
 80035d6:	d001      	beq.n	80035dc <osThreadNew+0x74>
        return (NULL);
 80035d8:	2300      	movs	r3, #0
 80035da:	e057      	b.n	800368c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00e      	beq.n	8003612 <osThreadNew+0xaa>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b5b      	cmp	r3, #91	; 0x5b
 80035fa:	d90a      	bls.n	8003612 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <osThreadNew+0xaa>
        mem = 1;
 800360c:	2301      	movs	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e010      	b.n	8003634 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <osThreadNew+0xcc>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <osThreadNew+0xcc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <osThreadNew+0xcc>
          mem = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e001      	b.n	8003634 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d112      	bne.n	8003660 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003642:	68bd      	ldr	r5, [r7, #8]
 8003644:	6a3c      	ldr	r4, [r7, #32]
 8003646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	9302      	str	r3, [sp, #8]
 800364c:	9201      	str	r2, [sp, #4]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	002b      	movs	r3, r5
 8003654:	0022      	movs	r2, r4
 8003656:	f000 fd3e 	bl	80040d6 <xTaskCreateStatic>
 800365a:	0003      	movs	r3, r0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e014      	b.n	800368a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d111      	bne.n	800368a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	b29a      	uxth	r2, r3
 800366a:	68bc      	ldr	r4, [r7, #8]
 800366c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	2310      	movs	r3, #16
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	0023      	movs	r3, r4
 800367c:	f000 fd6f 	bl	800415e <xTaskCreate>
 8003680:	0003      	movs	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	d001      	beq.n	800368a <osThreadNew+0x122>
            hTask = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800368a:	693b      	ldr	r3, [r7, #16]
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b00a      	add	sp, #40	; 0x28
 8003692:	bdb0      	pop	{r4, r5, r7, pc}

08003694 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800369c:	f3ef 8305 	mrs	r3, IPSR
 80036a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <osDelay+0x1c>
    stat = osErrorISR;
 80036a8:	2306      	movs	r3, #6
 80036aa:	425b      	negs	r3, r3
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e008      	b.n	80036c2 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <osDelay+0x2e>
      vTaskDelay(ticks);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 fe8d 	bl	80043dc <vTaskDelay>
    }
  }

  return (stat);
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b004      	add	sp, #16
 80036ca:	bd80      	pop	{r7, pc}

080036cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a06      	ldr	r2, [pc, #24]	; (80036f4 <vApplicationGetIdleTaskMemory+0x28>)
 80036dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80036e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	200004ec 	.word	0x200004ec
 80036f8:	20000548 	.word	0x20000548

080036fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a06      	ldr	r2, [pc, #24]	; (8003724 <vApplicationGetTimerTaskMemory+0x28>)
 800370c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a05      	ldr	r2, [pc, #20]	; (8003728 <vApplicationGetTimerTaskMemory+0x2c>)
 8003712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	0052      	lsls	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000748 	.word	0x20000748
 8003728:	200007a4 	.word	0x200007a4

0800372c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3308      	adds	r3, #8
 8003738:	001a      	movs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	4252      	negs	r2, r2
 8003744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3308      	adds	r3, #8
 800374a:	001a      	movs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3308      	adds	r3, #8
 8003754:	001a      	movs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	b002      	add	sp, #8
 800377c:	bd80      	pop	{r7, pc}

0800377e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b004      	add	sp, #16
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3301      	adds	r3, #1
 80037d6:	d103      	bne.n	80037e0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e00c      	b.n	80037fa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3308      	adds	r3, #8
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e002      	b.n	80037ee <vListInsert+0x2c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d2f6      	bcs.n	80037e8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}

0800382e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6852      	ldr	r2, [r2, #4]
 800384e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d103      	bne.n	8003862 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b004      	add	sp, #16
 800387c:	bd80      	pop	{r7, pc}

0800387e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <xQueueGenericReset+0x18>
 8003892:	b672      	cpsid	i
 8003894:	e7fe      	b.n	8003894 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003896:	f001 fe13 	bl	80054c0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	434b      	muls	r3, r1
 80038a8:	18d2      	adds	r2, r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	1e59      	subs	r1, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	434b      	muls	r3, r1
 80038cc:	18d2      	adds	r2, r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2244      	movs	r2, #68	; 0x44
 80038d6:	21ff      	movs	r1, #255	; 0xff
 80038d8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2245      	movs	r2, #69	; 0x45
 80038de:	21ff      	movs	r1, #255	; 0xff
 80038e0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10d      	bne.n	8003904 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3310      	adds	r3, #16
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 ffd7 	bl	80048a8 <xTaskRemoveFromEventList>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d00c      	beq.n	8003918 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038fe:	f001 fdcf 	bl	80054a0 <vPortYield>
 8003902:	e009      	b.n	8003918 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3310      	adds	r3, #16
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff ff0f 	bl	800372c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3324      	adds	r3, #36	; 0x24
 8003912:	0018      	movs	r0, r3
 8003914:	f7ff ff0a 	bl	800372c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003918:	f001 fde4 	bl	80054e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800391c:	2301      	movs	r3, #1
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}

08003926 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003926:	b590      	push	{r4, r7, lr}
 8003928:	b089      	sub	sp, #36	; 0x24
 800392a:	af02      	add	r7, sp, #8
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <xQueueGenericCreateStatic+0x18>
 800393a:	b672      	cpsid	i
 800393c:	e7fe      	b.n	800393c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <xQueueGenericCreateStatic+0x22>
 8003944:	b672      	cpsid	i
 8003946:	e7fe      	b.n	8003946 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <xQueueGenericCreateStatic+0x2e>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <xQueueGenericCreateStatic+0x32>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <xQueueGenericCreateStatic+0x34>
 8003958:	2300      	movs	r3, #0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <xQueueGenericCreateStatic+0x3c>
 800395e:	b672      	cpsid	i
 8003960:	e7fe      	b.n	8003960 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <xQueueGenericCreateStatic+0x48>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <xQueueGenericCreateStatic+0x4c>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <xQueueGenericCreateStatic+0x4e>
 8003972:	2300      	movs	r3, #0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <xQueueGenericCreateStatic+0x56>
 8003978:	b672      	cpsid	i
 800397a:	e7fe      	b.n	800397a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800397c:	2350      	movs	r3, #80	; 0x50
 800397e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b50      	cmp	r3, #80	; 0x50
 8003984:	d001      	beq.n	800398a <xQueueGenericCreateStatic+0x64>
 8003986:	b672      	cpsid	i
 8003988:	e7fe      	b.n	8003988 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800398a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00e      	beq.n	80039b4 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2246      	movs	r2, #70	; 0x46
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800399e:	2328      	movs	r3, #40	; 0x28
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	781c      	ldrb	r4, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	0023      	movs	r3, r4
 80039b0:	f000 f805 	bl	80039be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039b4:	697b      	ldr	r3, [r7, #20]
	}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b007      	add	sp, #28
 80039bc:	bd90      	pop	{r4, r7, pc}

080039be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	001a      	movs	r2, r3
 80039cc:	1cfb      	adds	r3, r7, #3
 80039ce:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e002      	b.n	80039e4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2101      	movs	r1, #1
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff ff42 	bl	800387e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1cfa      	adds	r2, r7, #3
 80039fe:	214c      	movs	r1, #76	; 0x4c
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b004      	add	sp, #16
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <xQueueGenericSend+0x20>
 8003a28:	b672      	cpsid	i
 8003a2a:	e7fe      	b.n	8003a2a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <xQueueGenericSend+0x2e>
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <xQueueGenericSend+0x32>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <xQueueGenericSend+0x34>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <xQueueGenericSend+0x3c>
 8003a44:	b672      	cpsid	i
 8003a46:	e7fe      	b.n	8003a46 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d103      	bne.n	8003a56 <xQueueGenericSend+0x4a>
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <xQueueGenericSend+0x4e>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <xQueueGenericSend+0x50>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <xQueueGenericSend+0x58>
 8003a60:	b672      	cpsid	i
 8003a62:	e7fe      	b.n	8003a62 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a64:	f001 f8b2 	bl	8004bcc <xTaskGetSchedulerState>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d102      	bne.n	8003a72 <xQueueGenericSend+0x66>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <xQueueGenericSend+0x6a>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <xQueueGenericSend+0x6c>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <xQueueGenericSend+0x74>
 8003a7c:	b672      	cpsid	i
 8003a7e:	e7fe      	b.n	8003a7e <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a80:	f001 fd1e 	bl	80054c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d302      	bcc.n	8003a96 <xQueueGenericSend+0x8a>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d11e      	bne.n	8003ad4 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 f9a2 	bl	8003de6 <prvCopyDataToQueue>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 fef8 	bl	80048a8 <xTaskRemoveFromEventList>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d007      	beq.n	8003acc <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003abc:	f001 fcf0 	bl	80054a0 <vPortYield>
 8003ac0:	e004      	b.n	8003acc <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ac8:	f001 fcea 	bl	80054a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003acc:	f001 fd0a 	bl	80054e4 <vPortExitCritical>
				return pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e05b      	b.n	8003b8c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ada:	f001 fd03 	bl	80054e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e054      	b.n	8003b8c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ae8:	2314      	movs	r3, #20
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 ff37 	bl	8004960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003af6:	f001 fcf5 	bl	80054e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003afa:	f000 fce9 	bl	80044d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003afe:	f001 fcdf 	bl	80054c0 <vPortEnterCritical>
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	2244      	movs	r2, #68	; 0x44
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSend+0x10a>
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	2244      	movs	r2, #68	; 0x44
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	2245      	movs	r2, #69	; 0x45
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	b25b      	sxtb	r3, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	d103      	bne.n	8003b2a <xQueueGenericSend+0x11e>
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	2245      	movs	r2, #69	; 0x45
 8003b26:	2100      	movs	r1, #0
 8003b28:	5499      	strb	r1, [r3, r2]
 8003b2a:	f001 fcdb 	bl	80054e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b2e:	1d3a      	adds	r2, r7, #4
 8003b30:	2314      	movs	r3, #20
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 ff26 	bl	8004988 <xTaskCheckForTimeOut>
 8003b3c:	1e03      	subs	r3, r0, #0
 8003b3e:	d11e      	bne.n	8003b7e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fa54 	bl	8003ff0 <prvIsQueueFull>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d011      	beq.n	8003b70 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	3310      	adds	r3, #16
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	0011      	movs	r1, r2
 8003b54:	0018      	movs	r0, r3
 8003b56:	f000 fe63 	bl	8004820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 f9d3 	bl	8003f08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b62:	f000 fcc1 	bl	80044e8 <xTaskResumeAll>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d18a      	bne.n	8003a80 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003b6a:	f001 fc99 	bl	80054a0 <vPortYield>
 8003b6e:	e787      	b.n	8003a80 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 f9c8 	bl	8003f08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b78:	f000 fcb6 	bl	80044e8 <xTaskResumeAll>
 8003b7c:	e780      	b.n	8003a80 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 f9c1 	bl	8003f08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b86:	f000 fcaf 	bl	80044e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b00a      	add	sp, #40	; 0x28
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b08b      	sub	sp, #44	; 0x2c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <xQueueGenericSendFromISR+0x1c>
 8003bac:	b672      	cpsid	i
 8003bae:	e7fe      	b.n	8003bae <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <xQueueGenericSendFromISR+0x2a>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <xQueueGenericSendFromISR+0x2e>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <xQueueGenericSendFromISR+0x30>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <xQueueGenericSendFromISR+0x38>
 8003bc8:	b672      	cpsid	i
 8003bca:	e7fe      	b.n	8003bca <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d103      	bne.n	8003bda <xQueueGenericSendFromISR+0x46>
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <xQueueGenericSendFromISR+0x4a>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueGenericSendFromISR+0x4c>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <xQueueGenericSendFromISR+0x54>
 8003be4:	b672      	cpsid	i
 8003be6:	e7fe      	b.n	8003be6 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003be8:	f001 fc94 	bl	8005514 <ulSetInterruptMaskFromISR>
 8003bec:	0003      	movs	r3, r0
 8003bee:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <xQueueGenericSendFromISR+0x6e>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d131      	bne.n	8003c66 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c02:	241b      	movs	r4, #27
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	6a3a      	ldr	r2, [r7, #32]
 8003c08:	2145      	movs	r1, #69	; 0x45
 8003c0a:	5c52      	ldrb	r2, [r2, r1]
 8003c0c:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 f8e3 	bl	8003de6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	d111      	bne.n	8003c4e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	3324      	adds	r3, #36	; 0x24
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 fe36 	bl	80048a8 <xTaskRemoveFromEventList>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d00f      	beq.n	8003c60 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e008      	b.n	8003c60 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c4e:	231b      	movs	r3, #27
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	b259      	sxtb	r1, r3
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2245      	movs	r2, #69	; 0x45
 8003c5e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003c60:	2301      	movs	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8003c64:	e001      	b.n	8003c6a <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f001 fc57 	bl	8005520 <vClearInterruptMaskFromISR>

	return xReturn;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b00b      	add	sp, #44	; 0x2c
 8003c7a:	bd90      	pop	{r4, r7, pc}

08003c7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <xQueueReceive+0x1e>
 8003c96:	b672      	cpsid	i
 8003c98:	e7fe      	b.n	8003c98 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <xQueueReceive+0x2c>
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <xQueueReceive+0x30>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <xQueueReceive+0x32>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <xQueueReceive+0x3a>
 8003cb2:	b672      	cpsid	i
 8003cb4:	e7fe      	b.n	8003cb4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cb6:	f000 ff89 	bl	8004bcc <xTaskGetSchedulerState>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d102      	bne.n	8003cc4 <xQueueReceive+0x48>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <xQueueReceive+0x4c>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <xQueueReceive+0x4e>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <xQueueReceive+0x56>
 8003cce:	b672      	cpsid	i
 8003cd0:	e7fe      	b.n	8003cd0 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cd2:	f001 fbf5 	bl	80054c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01a      	beq.n	8003d18 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 f8e7 	bl	8003ebc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	3310      	adds	r3, #16
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 fdd0 	bl	80048a8 <xTaskRemoveFromEventList>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d0c:	f001 fbc8 	bl	80054a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d10:	f001 fbe8 	bl	80054e4 <vPortExitCritical>
				return pdPASS;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e062      	b.n	8003dde <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d1e:	f001 fbe1 	bl	80054e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e05b      	b.n	8003dde <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d2c:	2314      	movs	r3, #20
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 fe15 	bl	8004960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d3a:	f001 fbd3 	bl	80054e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d3e:	f000 fbc7 	bl	80044d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d42:	f001 fbbd 	bl	80054c0 <vPortEnterCritical>
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	2244      	movs	r2, #68	; 0x44
 8003d4a:	5c9b      	ldrb	r3, [r3, r2]
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	d103      	bne.n	8003d5a <xQueueReceive+0xde>
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2244      	movs	r2, #68	; 0x44
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2245      	movs	r2, #69	; 0x45
 8003d5e:	5c9b      	ldrb	r3, [r3, r2]
 8003d60:	b25b      	sxtb	r3, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	d103      	bne.n	8003d6e <xQueueReceive+0xf2>
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2245      	movs	r2, #69	; 0x45
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	f001 fbb9 	bl	80054e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d72:	1d3a      	adds	r2, r7, #4
 8003d74:	2314      	movs	r3, #20
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 fe04 	bl	8004988 <xTaskCheckForTimeOut>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d11e      	bne.n	8003dc2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 f91c 	bl	8003fc4 <prvIsQueueEmpty>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d011      	beq.n	8003db4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	0011      	movs	r1, r2
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 fd41 	bl	8004820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 f8b1 	bl	8003f08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003da6:	f000 fb9f 	bl	80044e8 <xTaskResumeAll>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d191      	bne.n	8003cd2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003dae:	f001 fb77 	bl	80054a0 <vPortYield>
 8003db2:	e78e      	b.n	8003cd2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 f8a6 	bl	8003f08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dbc:	f000 fb94 	bl	80044e8 <xTaskResumeAll>
 8003dc0:	e787      	b.n	8003cd2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 f89f 	bl	8003f08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dca:	f000 fb8d 	bl	80044e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 f8f7 	bl	8003fc4 <prvIsQueueEmpty>
 8003dd6:	1e03      	subs	r3, r0, #0
 8003dd8:	d100      	bne.n	8003ddc <xQueueReceive+0x160>
 8003dda:	e77a      	b.n	8003cd2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b00a      	add	sp, #40	; 0x28
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10e      	bne.n	8003e22 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d14e      	bne.n	8003eaa <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f000 fef7 	bl	8004c04 <xTaskPriorityDisinherit>
 8003e16:	0003      	movs	r3, r0
 8003e18:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	e043      	b.n	8003eaa <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d119      	bne.n	8003e5c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6858      	ldr	r0, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	0019      	movs	r1, r3
 8003e34:	f001 fdba 	bl	80059ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	18d2      	adds	r2, r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d32b      	bcc.n	8003eaa <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	e026      	b.n	8003eaa <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68d8      	ldr	r0, [r3, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	0019      	movs	r1, r3
 8003e68:	f001 fda0 	bl	80059ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	425b      	negs	r3, r3
 8003e76:	18d2      	adds	r2, r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	425b      	negs	r3, r3
 8003e92:	18d2      	adds	r2, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d105      	bne.n	8003eaa <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003eb2:	697b      	ldr	r3, [r7, #20]
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b006      	add	sp, #24
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	18d2      	adds	r2, r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d303      	bcc.n	8003ef0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68d9      	ldr	r1, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f001 fd56 	bl	80059ac <memcpy>
	}
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f10:	f001 fad6 	bl	80054c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f14:	230f      	movs	r3, #15
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	2145      	movs	r1, #69	; 0x45
 8003f1c:	5c52      	ldrb	r2, [r2, r1]
 8003f1e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f20:	e013      	b.n	8003f4a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3324      	adds	r3, #36	; 0x24
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 fcba 	bl	80048a8 <xTaskRemoveFromEventList>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d001      	beq.n	8003f3c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f38:	f000 fd76 	bl	8004a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f3c:	210f      	movs	r1, #15
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f4a:	230f      	movs	r3, #15
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	dce5      	bgt.n	8003f22 <prvUnlockQueue+0x1a>
 8003f56:	e000      	b.n	8003f5a <prvUnlockQueue+0x52>
					break;
 8003f58:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2245      	movs	r2, #69	; 0x45
 8003f5e:	21ff      	movs	r1, #255	; 0xff
 8003f60:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003f62:	f001 fabf 	bl	80054e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f66:	f001 faab 	bl	80054c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f6a:	230e      	movs	r3, #14
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	2144      	movs	r1, #68	; 0x44
 8003f72:	5c52      	ldrb	r2, [r2, r1]
 8003f74:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f76:	e013      	b.n	8003fa0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d016      	beq.n	8003fae <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3310      	adds	r3, #16
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fc8f 	bl	80048a8 <xTaskRemoveFromEventList>
 8003f8a:	1e03      	subs	r3, r0, #0
 8003f8c:	d001      	beq.n	8003f92 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003f8e:	f000 fd4b 	bl	8004a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f92:	210e      	movs	r1, #14
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fa0:	230e      	movs	r3, #14
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	dce5      	bgt.n	8003f78 <prvUnlockQueue+0x70>
 8003fac:	e000      	b.n	8003fb0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003fae:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2244      	movs	r2, #68	; 0x44
 8003fb4:	21ff      	movs	r1, #255	; 0xff
 8003fb6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003fb8:	f001 fa94 	bl	80054e4 <vPortExitCritical>
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b004      	add	sp, #16
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fcc:	f001 fa78 	bl	80054c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e001      	b.n	8003fe2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fe2:	f001 fa7f 	bl	80054e4 <vPortExitCritical>

	return xReturn;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b004      	add	sp, #16
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ff8:	f001 fa62 	bl	80054c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	429a      	cmp	r2, r3
 8004006:	d102      	bne.n	800400e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	e001      	b.n	8004012 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004012:	f001 fa67 	bl	80054e4 <vPortExitCritical>

	return xReturn;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b004      	add	sp, #16
 800401e:	bd80      	pop	{r7, pc}

08004020 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e015      	b.n	800405c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <vQueueAddToRegistry+0x4c>)
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	00d2      	lsls	r2, r2, #3
 8004036:	58d3      	ldr	r3, [r2, r3]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10c      	bne.n	8004056 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <vQueueAddToRegistry+0x4c>)
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	00d2      	lsls	r2, r2, #3
 8004042:	6839      	ldr	r1, [r7, #0]
 8004044:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <vQueueAddToRegistry+0x4c>)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	18d3      	adds	r3, r2, r3
 800404e:	3304      	adds	r3, #4
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004054:	e006      	b.n	8004064 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b07      	cmp	r3, #7
 8004060:	d9e6      	bls.n	8004030 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b004      	add	sp, #16
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000ba4 	.word	0x20000ba4

08004070 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004080:	f001 fa1e 	bl	80054c0 <vPortEnterCritical>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2244      	movs	r2, #68	; 0x44
 8004088:	5c9b      	ldrb	r3, [r3, r2]
 800408a:	b25b      	sxtb	r3, r3
 800408c:	3301      	adds	r3, #1
 800408e:	d103      	bne.n	8004098 <vQueueWaitForMessageRestricted+0x28>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2244      	movs	r2, #68	; 0x44
 8004094:	2100      	movs	r1, #0
 8004096:	5499      	strb	r1, [r3, r2]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2245      	movs	r2, #69	; 0x45
 800409c:	5c9b      	ldrb	r3, [r3, r2]
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	d103      	bne.n	80040ac <vQueueWaitForMessageRestricted+0x3c>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2245      	movs	r2, #69	; 0x45
 80040a8:	2100      	movs	r1, #0
 80040aa:	5499      	strb	r1, [r3, r2]
 80040ac:	f001 fa1a 	bl	80054e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3324      	adds	r3, #36	; 0x24
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 fbcb 	bl	800485c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff ff1d 	bl	8003f08 <prvUnlockQueue>
	}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b006      	add	sp, #24
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040d6:	b590      	push	{r4, r7, lr}
 80040d8:	b08d      	sub	sp, #52	; 0x34
 80040da:	af04      	add	r7, sp, #16
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <xTaskCreateStatic+0x18>
 80040ea:	b672      	cpsid	i
 80040ec:	e7fe      	b.n	80040ec <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <xTaskCreateStatic+0x22>
 80040f4:	b672      	cpsid	i
 80040f6:	e7fe      	b.n	80040f6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040f8:	235c      	movs	r3, #92	; 0x5c
 80040fa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b5c      	cmp	r3, #92	; 0x5c
 8004100:	d001      	beq.n	8004106 <xTaskCreateStatic+0x30>
 8004102:	b672      	cpsid	i
 8004104:	e7fe      	b.n	8004104 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004106:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	2b00      	cmp	r3, #0
 800410c:	d020      	beq.n	8004150 <xTaskCreateStatic+0x7a>
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01d      	beq.n	8004150 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800411c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2259      	movs	r2, #89	; 0x59
 8004122:	2102      	movs	r1, #2
 8004124:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004126:	683c      	ldr	r4, [r7, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	2300      	movs	r3, #0
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	9302      	str	r3, [sp, #8]
 8004136:	2318      	movs	r3, #24
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	0023      	movs	r3, r4
 8004142:	f000 f859 	bl	80041f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	0018      	movs	r0, r3
 800414a:	f000 f8df 	bl	800430c <prvAddNewTaskToReadyList>
 800414e:	e001      	b.n	8004154 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004154:	69bb      	ldr	r3, [r7, #24]
	}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b009      	add	sp, #36	; 0x24
 800415c:	bd90      	pop	{r4, r7, pc}

0800415e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800415e:	b590      	push	{r4, r7, lr}
 8004160:	b08d      	sub	sp, #52	; 0x34
 8004162:	af04      	add	r7, sp, #16
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	1dbb      	adds	r3, r7, #6
 800416c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800416e:	1dbb      	adds	r3, r7, #6
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	0018      	movs	r0, r3
 8004176:	f001 fa3b 	bl	80055f0 <pvPortMalloc>
 800417a:	0003      	movs	r3, r0
 800417c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004184:	205c      	movs	r0, #92	; 0x5c
 8004186:	f001 fa33 	bl	80055f0 <pvPortMalloc>
 800418a:	0003      	movs	r3, r0
 800418c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
 800419a:	e006      	b.n	80041aa <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	0018      	movs	r0, r3
 80041a0:	f001 fad2 	bl	8005748 <vPortFree>
 80041a4:	e001      	b.n	80041aa <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01a      	beq.n	80041e6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2259      	movs	r2, #89	; 0x59
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041b8:	1dbb      	adds	r3, r7, #6
 80041ba:	881a      	ldrh	r2, [r3, #0]
 80041bc:	683c      	ldr	r4, [r7, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9303      	str	r3, [sp, #12]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	9302      	str	r3, [sp, #8]
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	0023      	movs	r3, r4
 80041d4:	f000 f810 	bl	80041f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 f896 	bl	800430c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041e0:	2301      	movs	r3, #1
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	e002      	b.n	80041ec <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041e6:	2301      	movs	r3, #1
 80041e8:	425b      	negs	r3, r3
 80041ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ec:	69bb      	ldr	r3, [r7, #24]
	}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b009      	add	sp, #36	; 0x24
 80041f4:	bd90      	pop	{r4, r7, pc}
	...

080041f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	001a      	movs	r2, r3
 8004210:	21a5      	movs	r1, #165	; 0xa5
 8004212:	f001 fb9f 	bl	8005954 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	493a      	ldr	r1, [pc, #232]	; (8004308 <prvInitialiseNewTask+0x110>)
 800421e:	468c      	mov	ip, r1
 8004220:	4463      	add	r3, ip
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	18d3      	adds	r3, r2, r3
 8004226:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2207      	movs	r2, #7
 800422c:	4393      	bics	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2207      	movs	r2, #7
 8004234:	4013      	ands	r3, r2
 8004236:	d001      	beq.n	800423c <prvInitialiseNewTask+0x44>
 8004238:	b672      	cpsid	i
 800423a:	e7fe      	b.n	800423a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d020      	beq.n	8004284 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e013      	b.n	8004270 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	18d3      	adds	r3, r2, r3
 800424e:	7818      	ldrb	r0, [r3, #0]
 8004250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004252:	2134      	movs	r1, #52	; 0x34
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	185b      	adds	r3, r3, r1
 800425a:	1c02      	adds	r2, r0, #0
 800425c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	18d3      	adds	r3, r2, r3
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3301      	adds	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	d9e8      	bls.n	8004248 <prvInitialiseNewTask+0x50>
 8004276:	e000      	b.n	800427a <prvInitialiseNewTask+0x82>
			{
				break;
 8004278:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	2243      	movs	r2, #67	; 0x43
 800427e:	2100      	movs	r1, #0
 8004280:	5499      	strb	r1, [r3, r2]
 8004282:	e003      	b.n	800428c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	2234      	movs	r2, #52	; 0x34
 8004288:	2100      	movs	r1, #0
 800428a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	2b37      	cmp	r3, #55	; 0x37
 8004290:	d901      	bls.n	8004296 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004292:	2337      	movs	r3, #55	; 0x37
 8004294:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	6a3a      	ldr	r2, [r7, #32]
 80042a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	2200      	movs	r2, #0
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	3304      	adds	r3, #4
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff fa5b 	bl	8003768 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	3318      	adds	r3, #24
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff fa56 	bl	8003768 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	2238      	movs	r2, #56	; 0x38
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	2200      	movs	r2, #0
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2258      	movs	r2, #88	; 0x58
 80042dc:	2100      	movs	r1, #0
 80042de:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f001 f84e 	bl	8005388 <pxPortInitialiseStack>
 80042ec:	0002      	movs	r2, r0
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b006      	add	sp, #24
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	3fffffff 	.word	0x3fffffff

0800430c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004314:	f001 f8d4 	bl	80054c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004318:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <prvAddNewTaskToReadyList+0xb8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <prvAddNewTaskToReadyList+0xb8>)
 8004320:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <prvAddNewTaskToReadyList+0xb8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d110      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004338:	f000 fb90 	bl	8004a5c <prvInitialiseTaskLists>
 800433c:	e00d      	b.n	800435a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800433e:	4b23      	ldr	r3, [pc, #140]	; (80043cc <prvAddNewTaskToReadyList+0xc0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	429a      	cmp	r2, r3
 8004352:	d802      	bhi.n	800435a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004362:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d903      	bls.n	8004380 <prvAddNewTaskToReadyList+0x74>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	0013      	movs	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	189b      	adds	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 800438e:	189a      	adds	r2, r3, r2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	0019      	movs	r1, r3
 8004396:	0010      	movs	r0, r2
 8004398:	f7ff f9f1 	bl	800377e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800439c:	f001 f8a2 	bl	80054e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvAddNewTaskToReadyList+0xc0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d201      	bcs.n	80043ba <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043b6:	f001 f873 	bl	80054a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	b002      	add	sp, #8
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	200010b8 	.word	0x200010b8
 80043c8:	20000be4 	.word	0x20000be4
 80043cc:	200010c4 	.word	0x200010c4
 80043d0:	200010d4 	.word	0x200010d4
 80043d4:	200010c0 	.word	0x200010c0
 80043d8:	20000be8 	.word	0x20000be8

080043dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d010      	beq.n	8004410 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <vTaskDelay+0x48>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <vTaskDelay+0x1e>
 80043f6:	b672      	cpsid	i
 80043f8:	e7fe      	b.n	80043f8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80043fa:	f000 f869 	bl	80044d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2100      	movs	r1, #0
 8004402:	0018      	movs	r0, r3
 8004404:	f000 fc5a 	bl	8004cbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004408:	f000 f86e 	bl	80044e8 <xTaskResumeAll>
 800440c:	0003      	movs	r3, r0
 800440e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004416:	f001 f843 	bl	80054a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b004      	add	sp, #16
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	200010e0 	.word	0x200010e0

08004428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004436:	003a      	movs	r2, r7
 8004438:	1d39      	adds	r1, r7, #4
 800443a:	2308      	movs	r3, #8
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff f944 	bl	80036cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004444:	683c      	ldr	r4, [r7, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	491b      	ldr	r1, [pc, #108]	; (80044b8 <vTaskStartScheduler+0x90>)
 800444c:	481b      	ldr	r0, [pc, #108]	; (80044bc <vTaskStartScheduler+0x94>)
 800444e:	9202      	str	r2, [sp, #8]
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	2300      	movs	r3, #0
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	0022      	movs	r2, r4
 800445a:	f7ff fe3c 	bl	80040d6 <xTaskCreateStatic>
 800445e:	0002      	movs	r2, r0
 8004460:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <vTaskStartScheduler+0x98>)
 8004462:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004464:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <vTaskStartScheduler+0x98>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800446c:	2301      	movs	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e001      	b.n	8004476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d103      	bne.n	8004484 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800447c:	f000 fc72 	bl	8004d64 <xTimerCreateTimerTask>
 8004480:	0003      	movs	r3, r0
 8004482:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10d      	bne.n	80044a6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800448a:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800448c:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <vTaskStartScheduler+0x9c>)
 800448e:	2201      	movs	r2, #1
 8004490:	4252      	negs	r2, r2
 8004492:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <vTaskStartScheduler+0xa0>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <vTaskStartScheduler+0xa4>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044a0:	f000 ffda 	bl	8005458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044a4:	e004      	b.n	80044b0 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	d101      	bne.n	80044b0 <vTaskStartScheduler+0x88>
 80044ac:	b672      	cpsid	i
 80044ae:	e7fe      	b.n	80044ae <vTaskStartScheduler+0x86>
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b005      	add	sp, #20
 80044b6:	bd90      	pop	{r4, r7, pc}
 80044b8:	080059e8 	.word	0x080059e8
 80044bc:	08004a3d 	.word	0x08004a3d
 80044c0:	200010dc 	.word	0x200010dc
 80044c4:	200010d8 	.word	0x200010d8
 80044c8:	200010c4 	.word	0x200010c4
 80044cc:	200010bc 	.word	0x200010bc

080044d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044d4:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <vTaskSuspendAll+0x14>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <vTaskSuspendAll+0x14>)
 80044dc:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200010e0 	.word	0x200010e0

080044e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044f6:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <xTaskResumeAll+0xf8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <xTaskResumeAll+0x1a>
 80044fe:	b672      	cpsid	i
 8004500:	e7fe      	b.n	8004500 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004502:	f000 ffdd 	bl	80054c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004506:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <xTaskResumeAll+0xf8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	4b34      	ldr	r3, [pc, #208]	; (80045e0 <xTaskResumeAll+0xf8>)
 800450e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004510:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <xTaskResumeAll+0xf8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d15b      	bne.n	80045d0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004518:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <xTaskResumeAll+0xfc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d057      	beq.n	80045d0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004520:	e02f      	b.n	8004582 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <xTaskResumeAll+0x100>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3318      	adds	r3, #24
 800452e:	0018      	movs	r0, r3
 8004530:	f7ff f97d 	bl	800382e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3304      	adds	r3, #4
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff f978 	bl	800382e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <xTaskResumeAll+0x104>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d903      	bls.n	8004552 <xTaskResumeAll+0x6a>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	4b27      	ldr	r3, [pc, #156]	; (80045ec <xTaskResumeAll+0x104>)
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	0013      	movs	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	189b      	adds	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4a24      	ldr	r2, [pc, #144]	; (80045f0 <xTaskResumeAll+0x108>)
 8004560:	189a      	adds	r2, r3, r2
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3304      	adds	r3, #4
 8004566:	0019      	movs	r1, r3
 8004568:	0010      	movs	r0, r2
 800456a:	f7ff f908 	bl	800377e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <xTaskResumeAll+0x10c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800457c:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <xTaskResumeAll+0x110>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004582:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <xTaskResumeAll+0x100>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1cb      	bne.n	8004522 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004590:	f000 fafe 	bl	8004b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <xTaskResumeAll+0x114>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00f      	beq.n	80045c0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045a0:	f000 f83c 	bl	800461c <xTaskIncrementTick>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d002      	beq.n	80045ae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <xTaskResumeAll+0x110>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f2      	bne.n	80045a0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <xTaskResumeAll+0x114>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <xTaskResumeAll+0x110>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045cc:	f000 ff68 	bl	80054a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045d0:	f000 ff88 	bl	80054e4 <vPortExitCritical>

	return xAlreadyYielded;
 80045d4:	68bb      	ldr	r3, [r7, #8]
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b004      	add	sp, #16
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	200010e0 	.word	0x200010e0
 80045e4:	200010b8 	.word	0x200010b8
 80045e8:	20001078 	.word	0x20001078
 80045ec:	200010c0 	.word	0x200010c0
 80045f0:	20000be8 	.word	0x20000be8
 80045f4:	20000be4 	.word	0x20000be4
 80045f8:	200010cc 	.word	0x200010cc
 80045fc:	200010c8 	.word	0x200010c8

08004600 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <xTaskGetTickCount+0x18>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800460c:	687b      	ldr	r3, [r7, #4]
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200010bc 	.word	0x200010bc

0800461c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004626:	4b4a      	ldr	r3, [pc, #296]	; (8004750 <xTaskIncrementTick+0x134>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d000      	beq.n	8004630 <xTaskIncrementTick+0x14>
 800462e:	e084      	b.n	800473a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004630:	4b48      	ldr	r3, [pc, #288]	; (8004754 <xTaskIncrementTick+0x138>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004638:	4b46      	ldr	r3, [pc, #280]	; (8004754 <xTaskIncrementTick+0x138>)
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d117      	bne.n	8004674 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004644:	4b44      	ldr	r3, [pc, #272]	; (8004758 <xTaskIncrementTick+0x13c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <xTaskIncrementTick+0x36>
 800464e:	b672      	cpsid	i
 8004650:	e7fe      	b.n	8004650 <xTaskIncrementTick+0x34>
 8004652:	4b41      	ldr	r3, [pc, #260]	; (8004758 <xTaskIncrementTick+0x13c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	4b40      	ldr	r3, [pc, #256]	; (800475c <xTaskIncrementTick+0x140>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <xTaskIncrementTick+0x13c>)
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	4b3e      	ldr	r3, [pc, #248]	; (800475c <xTaskIncrementTick+0x140>)
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <xTaskIncrementTick+0x144>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <xTaskIncrementTick+0x144>)
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f000 fa8e 	bl	8004b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004674:	4b3b      	ldr	r3, [pc, #236]	; (8004764 <xTaskIncrementTick+0x148>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	429a      	cmp	r2, r3
 800467c:	d349      	bcc.n	8004712 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800467e:	4b36      	ldr	r3, [pc, #216]	; (8004758 <xTaskIncrementTick+0x13c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <xTaskIncrementTick+0x148>)
 800468a:	2201      	movs	r2, #1
 800468c:	4252      	negs	r2, r2
 800468e:	601a      	str	r2, [r3, #0]
					break;
 8004690:	e03f      	b.n	8004712 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004692:	4b31      	ldr	r3, [pc, #196]	; (8004758 <xTaskIncrementTick+0x13c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d203      	bcs.n	80046b2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <xTaskIncrementTick+0x148>)
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046b0:	e02f      	b.n	8004712 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3304      	adds	r3, #4
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff f8b9 	bl	800382e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	3318      	adds	r3, #24
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff f8b0 	bl	800382e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	4b25      	ldr	r3, [pc, #148]	; (8004768 <xTaskIncrementTick+0x14c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d903      	bls.n	80046e2 <xTaskIncrementTick+0xc6>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	4b22      	ldr	r3, [pc, #136]	; (8004768 <xTaskIncrementTick+0x14c>)
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	0013      	movs	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4a1f      	ldr	r2, [pc, #124]	; (800476c <xTaskIncrementTick+0x150>)
 80046f0:	189a      	adds	r2, r3, r2
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3304      	adds	r3, #4
 80046f6:	0019      	movs	r1, r3
 80046f8:	0010      	movs	r0, r2
 80046fa:	f7ff f840 	bl	800377e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <xTaskIncrementTick+0x154>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	429a      	cmp	r2, r3
 800470a:	d3b8      	bcc.n	800467e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004710:	e7b5      	b.n	800467e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <xTaskIncrementTick+0x154>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4914      	ldr	r1, [pc, #80]	; (800476c <xTaskIncrementTick+0x150>)
 800471a:	0013      	movs	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	189b      	adds	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	585b      	ldr	r3, [r3, r1]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d901      	bls.n	800472c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <xTaskIncrementTick+0x158>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e004      	b.n	8004744 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <xTaskIncrementTick+0x15c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <xTaskIncrementTick+0x15c>)
 8004742:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004744:	697b      	ldr	r3, [r7, #20]
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b006      	add	sp, #24
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	200010e0 	.word	0x200010e0
 8004754:	200010bc 	.word	0x200010bc
 8004758:	20001070 	.word	0x20001070
 800475c:	20001074 	.word	0x20001074
 8004760:	200010d0 	.word	0x200010d0
 8004764:	200010d8 	.word	0x200010d8
 8004768:	200010c0 	.word	0x200010c0
 800476c:	20000be8 	.word	0x20000be8
 8004770:	20000be4 	.word	0x20000be4
 8004774:	200010cc 	.word	0x200010cc
 8004778:	200010c8 	.word	0x200010c8

0800477c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <vTaskSwitchContext+0x90>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <vTaskSwitchContext+0x94>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004790:	e037      	b.n	8004802 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <vTaskSwitchContext+0x94>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <vTaskSwitchContext+0x98>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	e007      	b.n	80047b0 <vTaskSwitchContext+0x34>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <vTaskSwitchContext+0x2e>
 80047a6:	b672      	cpsid	i
 80047a8:	e7fe      	b.n	80047a8 <vTaskSwitchContext+0x2c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	4919      	ldr	r1, [pc, #100]	; (8004818 <vTaskSwitchContext+0x9c>)
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	0013      	movs	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	585b      	ldr	r3, [r3, r1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ee      	beq.n	80047a0 <vTaskSwitchContext+0x24>
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	0013      	movs	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4a12      	ldr	r2, [pc, #72]	; (8004818 <vTaskSwitchContext+0x9c>)
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d104      	bne.n	80047f2 <vTaskSwitchContext+0x76>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <vTaskSwitchContext+0xa0>)
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <vTaskSwitchContext+0x98>)
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	46bd      	mov	sp, r7
 8004806:	b002      	add	sp, #8
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	200010e0 	.word	0x200010e0
 8004810:	200010cc 	.word	0x200010cc
 8004814:	200010c0 	.word	0x200010c0
 8004818:	20000be8 	.word	0x20000be8
 800481c:	20000be4 	.word	0x20000be4

08004820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <vTaskPlaceOnEventList+0x14>
 8004830:	b672      	cpsid	i
 8004832:	e7fe      	b.n	8004832 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <vTaskPlaceOnEventList+0x38>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3318      	adds	r3, #24
 800483a:	001a      	movs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	0011      	movs	r1, r2
 8004840:	0018      	movs	r0, r3
 8004842:	f7fe ffbe 	bl	80037c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2101      	movs	r1, #1
 800484a:	0018      	movs	r0, r3
 800484c:	f000 fa36 	bl	8004cbc <prvAddCurrentTaskToDelayedList>
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000be4 	.word	0x20000be4

0800485c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <vTaskPlaceOnEventListRestricted+0x16>
 800486e:	b672      	cpsid	i
 8004870:	e7fe      	b.n	8004870 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <vTaskPlaceOnEventListRestricted+0x48>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3318      	adds	r3, #24
 8004878:	001a      	movs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	0011      	movs	r1, r2
 800487e:	0018      	movs	r0, r3
 8004880:	f7fe ff7d 	bl	800377e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800488a:	2301      	movs	r3, #1
 800488c:	425b      	negs	r3, r3
 800488e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	0011      	movs	r1, r2
 8004896:	0018      	movs	r0, r3
 8004898:	f000 fa10 	bl	8004cbc <prvAddCurrentTaskToDelayedList>
	}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000be4 	.word	0x20000be4

080048a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <xTaskRemoveFromEventList+0x1a>
 80048be:	b672      	cpsid	i
 80048c0:	e7fe      	b.n	80048c0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3318      	adds	r3, #24
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fe ffb1 	bl	800382e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <xTaskRemoveFromEventList+0xa0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d11d      	bne.n	8004910 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3304      	adds	r3, #4
 80048d8:	0018      	movs	r0, r3
 80048da:	f7fe ffa8 	bl	800382e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <xTaskRemoveFromEventList+0xa4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d903      	bls.n	80048f2 <xTaskRemoveFromEventList+0x4a>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <xTaskRemoveFromEventList+0xa4>)
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f6:	0013      	movs	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4a14      	ldr	r2, [pc, #80]	; (8004950 <xTaskRemoveFromEventList+0xa8>)
 8004900:	189a      	adds	r2, r3, r2
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3304      	adds	r3, #4
 8004906:	0019      	movs	r1, r3
 8004908:	0010      	movs	r0, r2
 800490a:	f7fe ff38 	bl	800377e <vListInsertEnd>
 800490e:	e007      	b.n	8004920 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	3318      	adds	r3, #24
 8004914:	001a      	movs	r2, r3
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <xTaskRemoveFromEventList+0xac>)
 8004918:	0011      	movs	r1, r2
 800491a:	0018      	movs	r0, r3
 800491c:	f7fe ff2f 	bl	800377e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <xTaskRemoveFromEventList+0xb0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	429a      	cmp	r2, r3
 800492c:	d905      	bls.n	800493a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800492e:	2301      	movs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <xTaskRemoveFromEventList+0xb4>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e001      	b.n	800493e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b004      	add	sp, #16
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200010e0 	.word	0x200010e0
 800494c:	200010c0 	.word	0x200010c0
 8004950:	20000be8 	.word	0x20000be8
 8004954:	20001078 	.word	0x20001078
 8004958:	20000be4 	.word	0x20000be4
 800495c:	200010cc 	.word	0x200010cc

08004960 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <vTaskInternalSetTimeOutState+0x20>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <vTaskInternalSetTimeOutState+0x24>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b002      	add	sp, #8
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200010d0 	.word	0x200010d0
 8004984:	200010bc 	.word	0x200010bc

08004988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xTaskCheckForTimeOut+0x14>
 8004998:	b672      	cpsid	i
 800499a:	e7fe      	b.n	800499a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <xTaskCheckForTimeOut+0x1e>
 80049a2:	b672      	cpsid	i
 80049a4:	e7fe      	b.n	80049a4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80049a6:	f000 fd8b 	bl	80054c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049aa:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <xTaskCheckForTimeOut+0x98>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	d102      	bne.n	80049c8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e024      	b.n	8004a12 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <xTaskCheckForTimeOut+0x9c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d007      	beq.n	80049e4 <xTaskCheckForTimeOut+0x5c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049de:	2301      	movs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e016      	b.n	8004a12 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d20c      	bcs.n	8004a08 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad2      	subs	r2, r2, r3
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7ff ffaf 	bl	8004960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e004      	b.n	8004a12 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004a12:	f000 fd67 	bl	80054e4 <vPortExitCritical>

	return xReturn;
 8004a16:	697b      	ldr	r3, [r7, #20]
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b006      	add	sp, #24
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	200010bc 	.word	0x200010bc
 8004a24:	200010d0 	.word	0x200010d0

08004a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a2c:	4b02      	ldr	r3, [pc, #8]	; (8004a38 <vTaskMissedYield+0x10>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	200010cc 	.word	0x200010cc

08004a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a44:	f000 f84e 	bl	8004ae4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <prvIdleTask+0x1c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d9f9      	bls.n	8004a44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a50:	f000 fd26 	bl	80054a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004a54:	e7f6      	b.n	8004a44 <prvIdleTask+0x8>
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	20000be8 	.word	0x20000be8

08004a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	e00c      	b.n	8004a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	0013      	movs	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <prvInitialiseTaskLists+0x68>)
 8004a74:	189b      	adds	r3, r3, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7fe fe58 	bl	800372c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b37      	cmp	r3, #55	; 0x37
 8004a86:	d9ef      	bls.n	8004a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <prvInitialiseTaskLists+0x6c>)
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f7fe fe4e 	bl	800372c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a90:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <prvInitialiseTaskLists+0x70>)
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7fe fe4a 	bl	800372c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a98:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <prvInitialiseTaskLists+0x74>)
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fe fe46 	bl	800372c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <prvInitialiseTaskLists+0x78>)
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7fe fe42 	bl	800372c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <prvInitialiseTaskLists+0x7c>)
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7fe fe3e 	bl	800372c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <prvInitialiseTaskLists+0x80>)
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <prvInitialiseTaskLists+0x6c>)
 8004ab4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <prvInitialiseTaskLists+0x84>)
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <prvInitialiseTaskLists+0x70>)
 8004aba:	601a      	str	r2, [r3, #0]
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000be8 	.word	0x20000be8
 8004ac8:	20001048 	.word	0x20001048
 8004acc:	2000105c 	.word	0x2000105c
 8004ad0:	20001078 	.word	0x20001078
 8004ad4:	2000108c 	.word	0x2000108c
 8004ad8:	200010a4 	.word	0x200010a4
 8004adc:	20001070 	.word	0x20001070
 8004ae0:	20001074 	.word	0x20001074

08004ae4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aea:	e01a      	b.n	8004b22 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004aec:	f000 fce8 	bl	80054c0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af0:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <prvCheckTasksWaitingTermination+0x50>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7fe fe96 	bl	800382e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <prvCheckTasksWaitingTermination+0x54>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	1e5a      	subs	r2, r3, #1
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <prvCheckTasksWaitingTermination+0x54>)
 8004b0a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	1e5a      	subs	r2, r3, #1
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b14:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004b16:	f000 fce5 	bl	80054e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f80f 	bl	8004b40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b22:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e0      	bne.n	8004aec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	2000108c 	.word	0x2000108c
 8004b38:	200010b8 	.word	0x200010b8
 8004b3c:	200010a0 	.word	0x200010a0

08004b40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2259      	movs	r2, #89	; 0x59
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fdf6 	bl	8005748 <vPortFree>
				vPortFree( pxTCB );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 fdf2 	bl	8005748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b64:	e010      	b.n	8004b88 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2259      	movs	r2, #89	; 0x59
 8004b6a:	5c9b      	ldrb	r3, [r3, r2]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d104      	bne.n	8004b7a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 fde8 	bl	8005748 <vPortFree>
	}
 8004b78:	e006      	b.n	8004b88 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2259      	movs	r2, #89	; 0x59
 8004b7e:	5c9b      	ldrb	r3, [r3, r2]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d001      	beq.n	8004b88 <prvDeleteTCB+0x48>
 8004b84:	b672      	cpsid	i
 8004b86:	e7fe      	b.n	8004b86 <prvDeleteTCB+0x46>
	}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <prvResetNextTaskUnblockTime+0x34>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4252      	negs	r2, r2
 8004ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ba8:	e008      	b.n	8004bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <prvResetNextTaskUnblockTime+0x34>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20001070 	.word	0x20001070
 8004bc8:	200010d8 	.word	0x200010d8

08004bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <xTaskGetSchedulerState+0x30>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	e008      	b.n	8004bf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <xTaskGetSchedulerState+0x34>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004be8:	2302      	movs	r3, #2
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	e001      	b.n	8004bf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bf2:	687b      	ldr	r3, [r7, #4]
	}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200010c4 	.word	0x200010c4
 8004c00:	200010e0 	.word	0x200010e0

08004c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d044      	beq.n	8004ca4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c1a:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <xTaskPriorityDisinherit+0xac>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <xTaskPriorityDisinherit+0x24>
 8004c24:	b672      	cpsid	i
 8004c26:	e7fe      	b.n	8004c26 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xTaskPriorityDisinherit+0x30>
 8004c30:	b672      	cpsid	i
 8004c32:	e7fe      	b.n	8004c32 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	1e5a      	subs	r2, r3, #1
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d02c      	beq.n	8004ca4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d128      	bne.n	8004ca4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3304      	adds	r3, #4
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7fe fde9 	bl	800382e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	2238      	movs	r2, #56	; 0x38
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <xTaskPriorityDisinherit+0xb0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <xTaskPriorityDisinherit+0x80>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <xTaskPriorityDisinherit+0xb0>)
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	0013      	movs	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <xTaskPriorityDisinherit+0xb4>)
 8004c92:	189a      	adds	r2, r3, r2
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3304      	adds	r3, #4
 8004c98:	0019      	movs	r1, r3
 8004c9a:	0010      	movs	r0, r2
 8004c9c:	f7fe fd6f 	bl	800377e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
	}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	20000be4 	.word	0x20000be4
 8004cb4:	200010c0 	.word	0x200010c0
 8004cb8:	20000be8 	.word	0x20000be8

08004cbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cc6:	4b21      	ldr	r3, [pc, #132]	; (8004d4c <prvAddCurrentTaskToDelayedList+0x90>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ccc:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7fe fdab 	bl	800382e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	d10b      	bne.n	8004cf6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cec:	0011      	movs	r1, r2
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7fe fd45 	bl	800377e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cf4:	e026      	b.n	8004d44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	18d3      	adds	r3, r2, r3
 8004cfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cfe:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d209      	bcs.n	8004d22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3304      	adds	r3, #4
 8004d18:	0019      	movs	r1, r3
 8004d1a:	0010      	movs	r0, r2
 8004d1c:	f7fe fd51 	bl	80037c2 <vListInsert>
}
 8004d20:	e010      	b.n	8004d44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	0010      	movs	r0, r2
 8004d30:	f7fe fd47 	bl	80037c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d202      	bcs.n	8004d44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d3e:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b004      	add	sp, #16
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	200010bc 	.word	0x200010bc
 8004d50:	20000be4 	.word	0x20000be4
 8004d54:	200010a4 	.word	0x200010a4
 8004d58:	20001074 	.word	0x20001074
 8004d5c:	20001070 	.word	0x20001070
 8004d60:	200010d8 	.word	0x200010d8

08004d64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b089      	sub	sp, #36	; 0x24
 8004d68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d6e:	f000 fac9 	bl	8005304 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d72:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <xTimerCreateTimerTask+0x6c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d020      	beq.n	8004dbc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d82:	003a      	movs	r2, r7
 8004d84:	1d39      	adds	r1, r7, #4
 8004d86:	2308      	movs	r3, #8
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f7fe fcb6 	bl	80036fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d90:	683c      	ldr	r4, [r7, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	490f      	ldr	r1, [pc, #60]	; (8004dd4 <xTimerCreateTimerTask+0x70>)
 8004d98:	480f      	ldr	r0, [pc, #60]	; (8004dd8 <xTimerCreateTimerTask+0x74>)
 8004d9a:	9202      	str	r2, [sp, #8]
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	2302      	movs	r3, #2
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	0022      	movs	r2, r4
 8004da6:	f7ff f996 	bl	80040d6 <xTaskCreateStatic>
 8004daa:	0002      	movs	r2, r0
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <xTimerCreateTimerTask+0x78>)
 8004dae:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <xTimerCreateTimerTask+0x78>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004db8:	2301      	movs	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <xTimerCreateTimerTask+0x62>
 8004dc2:	b672      	cpsid	i
 8004dc4:	e7fe      	b.n	8004dc4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b005      	add	sp, #20
 8004dce:	bd90      	pop	{r4, r7, pc}
 8004dd0:	20001114 	.word	0x20001114
 8004dd4:	080059f0 	.word	0x080059f0
 8004dd8:	08004efd 	.word	0x08004efd
 8004ddc:	20001118 	.word	0x20001118

08004de0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b08b      	sub	sp, #44	; 0x2c
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <xTimerGenericCommand+0x1c>
 8004df8:	b672      	cpsid	i
 8004dfa:	e7fe      	b.n	8004dfa <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <xTimerGenericCommand+0x90>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d030      	beq.n	8004e66 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e04:	2414      	movs	r4, #20
 8004e06:	193b      	adds	r3, r7, r4
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e0c:	193b      	adds	r3, r7, r4
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	dc19      	bgt.n	8004e52 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e1e:	f7ff fed5 	bl	8004bcc <xTaskGetSchedulerState>
 8004e22:	0003      	movs	r3, r0
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d109      	bne.n	8004e3c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <xTimerGenericCommand+0x90>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e2e:	1939      	adds	r1, r7, r4
 8004e30:	2300      	movs	r3, #0
 8004e32:	f7fe fdeb 	bl	8003a0c <xQueueGenericSend>
 8004e36:	0003      	movs	r3, r0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	e014      	b.n	8004e66 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <xTimerGenericCommand+0x90>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	2314      	movs	r3, #20
 8004e42:	18f9      	adds	r1, r7, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	2200      	movs	r2, #0
 8004e48:	f7fe fde0 	bl	8003a0c <xQueueGenericSend>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	e009      	b.n	8004e66 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <xTimerGenericCommand+0x90>)
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	2314      	movs	r3, #20
 8004e5a:	18f9      	adds	r1, r7, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f7fe fe99 	bl	8003b94 <xQueueGenericSendFromISR>
 8004e62:	0003      	movs	r3, r0
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b00b      	add	sp, #44	; 0x2c
 8004e6e:	bd90      	pop	{r4, r7, pc}
 8004e70:	20001114 	.word	0x20001114

08004e74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <prvProcessExpiredTimer+0x84>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7fe fcce 	bl	800382e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2228      	movs	r2, #40	; 0x28
 8004e96:	5c9b      	ldrb	r3, [r3, r2]
 8004e98:	001a      	movs	r2, r3
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d019      	beq.n	8004ed4 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	18d1      	adds	r1, r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f8c3 	bl	8005038 <prvInsertTimerInActiveList>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d017      	beq.n	8004ee6 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	f7ff ff8d 	bl	8004de0 <xTimerGenericCommand>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <prvProcessExpiredTimer+0x72>
 8004ed0:	b672      	cpsid	i
 8004ed2:	e7fe      	b.n	8004ed2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2228      	movs	r2, #40	; 0x28
 8004ed8:	5c9b      	ldrb	r3, [r3, r2]
 8004eda:	2201      	movs	r2, #1
 8004edc:	4393      	bics	r3, r2
 8004ede:	b2d9      	uxtb	r1, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2228      	movs	r2, #40	; 0x28
 8004ee4:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	0010      	movs	r0, r2
 8004eee:	4798      	blx	r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b004      	add	sp, #16
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	2000110c 	.word	0x2000110c

08004efc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f04:	2308      	movs	r3, #8
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f000 f853 	bl	8004fb4 <prvGetNextExpireTime>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	0011      	movs	r1, r2
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f803 	bl	8004f24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f1e:	f000 f8cd 	bl	80050bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f22:	e7ef      	b.n	8004f04 <prvTimerTask+0x8>

08004f24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f2e:	f7ff facf 	bl	80044d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f32:	2308      	movs	r3, #8
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 f85e 	bl	8004ff8 <prvSampleTimeNow>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d12b      	bne.n	8004f9e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10c      	bne.n	8004f66 <prvProcessTimerOrBlockTask+0x42>
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d808      	bhi.n	8004f66 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004f54:	f7ff fac8 	bl	80044e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0011      	movs	r1, r2
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7ff ff88 	bl	8004e74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f64:	e01d      	b.n	8004fa2 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <prvProcessTimerOrBlockTask+0x88>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <prvProcessTimerOrBlockTask+0x56>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <prvProcessTimerOrBlockTask+0x58>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <prvProcessTimerOrBlockTask+0x8c>)
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	f7ff f870 	bl	8004070 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f90:	f7ff faaa 	bl	80044e8 <xTaskResumeAll>
 8004f94:	1e03      	subs	r3, r0, #0
 8004f96:	d104      	bne.n	8004fa2 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8004f98:	f000 fa82 	bl	80054a0 <vPortYield>
}
 8004f9c:	e001      	b.n	8004fa2 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8004f9e:	f7ff faa3 	bl	80044e8 <xTaskResumeAll>
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b004      	add	sp, #16
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	20001110 	.word	0x20001110
 8004fb0:	20001114 	.word	0x20001114

08004fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <prvGetNextExpireTime+0x40>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <prvGetNextExpireTime+0x16>
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	e000      	b.n	8004fcc <prvGetNextExpireTime+0x18>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <prvGetNextExpireTime+0x40>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e001      	b.n	8004fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	2000110c 	.word	0x2000110c

08004ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005000:	f7ff fafe 	bl	8004600 <xTaskGetTickCount>
 8005004:	0003      	movs	r3, r0
 8005006:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <prvSampleTimeNow+0x3c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	429a      	cmp	r2, r3
 8005010:	d205      	bcs.n	800501e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005012:	f000 f919 	bl	8005248 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e002      	b.n	8005024 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <prvSampleTimeNow+0x3c>)
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bd80      	pop	{r7, pc}
 8005034:	2000111c 	.word	0x2000111c

08005038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d812      	bhi.n	8005084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	429a      	cmp	r2, r3
 800506a:	d302      	bcc.n	8005072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e01b      	b.n	80050aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005072:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <prvInsertTimerInActiveList+0x7c>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3304      	adds	r3, #4
 800507a:	0019      	movs	r1, r3
 800507c:	0010      	movs	r0, r2
 800507e:	f7fe fba0 	bl	80037c2 <vListInsert>
 8005082:	e012      	b.n	80050aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d206      	bcs.n	800509a <prvInsertTimerInActiveList+0x62>
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e007      	b.n	80050aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <prvInsertTimerInActiveList+0x80>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3304      	adds	r3, #4
 80050a2:	0019      	movs	r1, r3
 80050a4:	0010      	movs	r0, r2
 80050a6:	f7fe fb8c 	bl	80037c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050aa:	697b      	ldr	r3, [r7, #20]
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b006      	add	sp, #24
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20001110 	.word	0x20001110
 80050b8:	2000110c 	.word	0x2000110c

080050bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b08d      	sub	sp, #52	; 0x34
 80050c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050c2:	e0ac      	b.n	800521e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050c4:	2208      	movs	r2, #8
 80050c6:	18bb      	adds	r3, r7, r2
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da0f      	bge.n	80050ee <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050ce:	18bb      	adds	r3, r7, r2
 80050d0:	3304      	adds	r3, #4
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <prvProcessReceivedCommands+0x22>
 80050da:	b672      	cpsid	i
 80050dc:	e7fe      	b.n	80050dc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	6858      	ldr	r0, [r3, #4]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0019      	movs	r1, r3
 80050ec:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050ee:	2208      	movs	r2, #8
 80050f0:	18bb      	adds	r3, r7, r2
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	da00      	bge.n	80050fa <prvProcessReceivedCommands+0x3e>
 80050f8:	e091      	b.n	800521e <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050fa:	18bb      	adds	r3, r7, r2
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	3304      	adds	r3, #4
 800510c:	0018      	movs	r0, r3
 800510e:	f7fe fb8e 	bl	800382e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	0018      	movs	r0, r3
 8005116:	f7ff ff6f 	bl	8004ff8 <prvSampleTimeNow>
 800511a:	0003      	movs	r3, r0
 800511c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800511e:	2308      	movs	r3, #8
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b09      	cmp	r3, #9
 8005126:	d900      	bls.n	800512a <prvProcessReceivedCommands+0x6e>
 8005128:	e078      	b.n	800521c <prvProcessReceivedCommands+0x160>
 800512a:	009a      	lsls	r2, r3, #2
 800512c:	4b44      	ldr	r3, [pc, #272]	; (8005240 <prvProcessReceivedCommands+0x184>)
 800512e:	18d3      	adds	r3, r2, r3
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	2228      	movs	r2, #40	; 0x28
 8005138:	5c9b      	ldrb	r3, [r3, r2]
 800513a:	2201      	movs	r2, #1
 800513c:	4313      	orrs	r3, r2
 800513e:	b2d9      	uxtb	r1, r3
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	2228      	movs	r2, #40	; 0x28
 8005144:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005146:	2408      	movs	r4, #8
 8005148:	193b      	adds	r3, r7, r4
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	18d1      	adds	r1, r2, r3
 8005152:	193b      	adds	r3, r7, r4
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	6a38      	ldr	r0, [r7, #32]
 800515a:	f7ff ff6d 	bl	8005038 <prvInsertTimerInActiveList>
 800515e:	1e03      	subs	r3, r0, #0
 8005160:	d05d      	beq.n	800521e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	0010      	movs	r0, r2
 800516a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	2228      	movs	r2, #40	; 0x28
 8005170:	5c9b      	ldrb	r3, [r3, r2]
 8005172:	001a      	movs	r2, r3
 8005174:	2304      	movs	r3, #4
 8005176:	4013      	ands	r3, r2
 8005178:	d051      	beq.n	800521e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800517a:	193b      	adds	r3, r7, r4
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	18d2      	adds	r2, r2, r3
 8005184:	6a38      	ldr	r0, [r7, #32]
 8005186:	2300      	movs	r3, #0
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	2300      	movs	r3, #0
 800518c:	2100      	movs	r1, #0
 800518e:	f7ff fe27 	bl	8004de0 <xTimerGenericCommand>
 8005192:	0003      	movs	r3, r0
 8005194:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d140      	bne.n	800521e <prvProcessReceivedCommands+0x162>
 800519c:	b672      	cpsid	i
 800519e:	e7fe      	b.n	800519e <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2228      	movs	r2, #40	; 0x28
 80051a4:	5c9b      	ldrb	r3, [r3, r2]
 80051a6:	2201      	movs	r2, #1
 80051a8:	4393      	bics	r3, r2
 80051aa:	b2d9      	uxtb	r1, r3
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	2228      	movs	r2, #40	; 0x28
 80051b0:	5499      	strb	r1, [r3, r2]
					break;
 80051b2:	e034      	b.n	800521e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2228      	movs	r2, #40	; 0x28
 80051b8:	5c9b      	ldrb	r3, [r3, r2]
 80051ba:	2201      	movs	r2, #1
 80051bc:	4313      	orrs	r3, r2
 80051be:	b2d9      	uxtb	r1, r3
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2228      	movs	r2, #40	; 0x28
 80051c4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051c6:	2308      	movs	r3, #8
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <prvProcessReceivedCommands+0x120>
 80051d8:	b672      	cpsid	i
 80051da:	e7fe      	b.n	80051da <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	18d1      	adds	r1, r2, r3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	6a38      	ldr	r0, [r7, #32]
 80051ea:	f7ff ff25 	bl	8005038 <prvInsertTimerInActiveList>
					break;
 80051ee:	e016      	b.n	800521e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2228      	movs	r2, #40	; 0x28
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	001a      	movs	r2, r3
 80051f8:	2302      	movs	r3, #2
 80051fa:	4013      	ands	r3, r2
 80051fc:	d104      	bne.n	8005208 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 faa1 	bl	8005748 <vPortFree>
 8005206:	e00a      	b.n	800521e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	2228      	movs	r2, #40	; 0x28
 800520c:	5c9b      	ldrb	r3, [r3, r2]
 800520e:	2201      	movs	r2, #1
 8005210:	4393      	bics	r3, r2
 8005212:	b2d9      	uxtb	r1, r3
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2228      	movs	r2, #40	; 0x28
 8005218:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800521a:	e000      	b.n	800521e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 800521c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <prvProcessReceivedCommands+0x188>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2208      	movs	r2, #8
 8005224:	18b9      	adds	r1, r7, r2
 8005226:	2200      	movs	r2, #0
 8005228:	0018      	movs	r0, r3
 800522a:	f7fe fd27 	bl	8003c7c <xQueueReceive>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d000      	beq.n	8005234 <prvProcessReceivedCommands+0x178>
 8005232:	e747      	b.n	80050c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	46bd      	mov	sp, r7
 800523a:	b00b      	add	sp, #44	; 0x2c
 800523c:	bd90      	pop	{r4, r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	08005ad0 	.word	0x08005ad0
 8005244:	20001114 	.word	0x20001114

08005248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800524e:	e041      	b.n	80052d4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005250:	4b2a      	ldr	r3, [pc, #168]	; (80052fc <prvSwitchTimerLists+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800525a:	4b28      	ldr	r3, [pc, #160]	; (80052fc <prvSwitchTimerLists+0xb4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3304      	adds	r3, #4
 8005268:	0018      	movs	r0, r3
 800526a:	f7fe fae0 	bl	800382e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	0010      	movs	r0, r2
 8005276:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2228      	movs	r2, #40	; 0x28
 800527c:	5c9b      	ldrb	r3, [r3, r2]
 800527e:	001a      	movs	r2, r3
 8005280:	2304      	movs	r3, #4
 8005282:	4013      	ands	r3, r2
 8005284:	d026      	beq.n	80052d4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d90e      	bls.n	80052b6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052a4:	4b15      	ldr	r3, [pc, #84]	; (80052fc <prvSwitchTimerLists+0xb4>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3304      	adds	r3, #4
 80052ac:	0019      	movs	r1, r3
 80052ae:	0010      	movs	r0, r2
 80052b0:	f7fe fa87 	bl	80037c2 <vListInsert>
 80052b4:	e00e      	b.n	80052d4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	2300      	movs	r3, #0
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	2300      	movs	r3, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	f7ff fd8d 	bl	8004de0 <xTimerGenericCommand>
 80052c6:	0003      	movs	r3, r0
 80052c8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <prvSwitchTimerLists+0x8c>
 80052d0:	b672      	cpsid	i
 80052d2:	e7fe      	b.n	80052d2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <prvSwitchTimerLists+0xb4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1b8      	bne.n	8005250 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <prvSwitchTimerLists+0xb4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <prvSwitchTimerLists+0xb8>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b04      	ldr	r3, [pc, #16]	; (80052fc <prvSwitchTimerLists+0xb4>)
 80052ea:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80052ec:	4b04      	ldr	r3, [pc, #16]	; (8005300 <prvSwitchTimerLists+0xb8>)
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b006      	add	sp, #24
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	2000110c 	.word	0x2000110c
 8005300:	20001110 	.word	0x20001110

08005304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800530a:	f000 f8d9 	bl	80054c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800530e:	4b16      	ldr	r3, [pc, #88]	; (8005368 <prvCheckForValidListAndQueue+0x64>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d123      	bne.n	800535e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <prvCheckForValidListAndQueue+0x68>)
 8005318:	0018      	movs	r0, r3
 800531a:	f7fe fa07 	bl	800372c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <prvCheckForValidListAndQueue+0x6c>)
 8005320:	0018      	movs	r0, r3
 8005322:	f7fe fa03 	bl	800372c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005326:	4b13      	ldr	r3, [pc, #76]	; (8005374 <prvCheckForValidListAndQueue+0x70>)
 8005328:	4a10      	ldr	r2, [pc, #64]	; (800536c <prvCheckForValidListAndQueue+0x68>)
 800532a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <prvCheckForValidListAndQueue+0x74>)
 800532e:	4a10      	ldr	r2, [pc, #64]	; (8005370 <prvCheckForValidListAndQueue+0x6c>)
 8005330:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <prvCheckForValidListAndQueue+0x78>)
 8005334:	4a12      	ldr	r2, [pc, #72]	; (8005380 <prvCheckForValidListAndQueue+0x7c>)
 8005336:	2100      	movs	r1, #0
 8005338:	9100      	str	r1, [sp, #0]
 800533a:	2110      	movs	r1, #16
 800533c:	200a      	movs	r0, #10
 800533e:	f7fe faf2 	bl	8003926 <xQueueGenericCreateStatic>
 8005342:	0002      	movs	r2, r0
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <prvCheckForValidListAndQueue+0x64>)
 8005346:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <prvCheckForValidListAndQueue+0x64>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d006      	beq.n	800535e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <prvCheckForValidListAndQueue+0x64>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0b      	ldr	r2, [pc, #44]	; (8005384 <prvCheckForValidListAndQueue+0x80>)
 8005356:	0011      	movs	r1, r2
 8005358:	0018      	movs	r0, r3
 800535a:	f7fe fe61 	bl	8004020 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800535e:	f000 f8c1 	bl	80054e4 <vPortExitCritical>
}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20001114 	.word	0x20001114
 800536c:	200010e4 	.word	0x200010e4
 8005370:	200010f8 	.word	0x200010f8
 8005374:	2000110c 	.word	0x2000110c
 8005378:	20001110 	.word	0x20001110
 800537c:	200011c0 	.word	0x200011c0
 8005380:	20001120 	.word	0x20001120
 8005384:	080059f8 	.word	0x080059f8

08005388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3b04      	subs	r3, #4
 8005398:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2280      	movs	r2, #128	; 0x80
 800539e:	0452      	lsls	r2, r2, #17
 80053a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3b04      	subs	r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053b4:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <pxPortInitialiseStack+0x50>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3b14      	subs	r3, #20
 80053be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3b20      	subs	r3, #32
 80053ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053cc:	68fb      	ldr	r3, [r7, #12]
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b004      	add	sp, #16
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	080053dd 	.word	0x080053dd

080053dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <prvTaskExitError+0x2c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	d001      	beq.n	80053f2 <prvTaskExitError+0x16>
 80053ee:	b672      	cpsid	i
 80053f0:	e7fe      	b.n	80053f0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80053f2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0fc      	beq.n	80053f6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b002      	add	sp, #8
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	2000000c 	.word	0x2000000c

0800540c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005420 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005420:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <pxCurrentTCBConst2>)
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	3020      	adds	r0, #32
 8005428:	f380 8809 	msr	PSP, r0
 800542c:	2002      	movs	r0, #2
 800542e:	f380 8814 	msr	CONTROL, r0
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005438:	46ae      	mov	lr, r5
 800543a:	bc08      	pop	{r3}
 800543c:	bc04      	pop	{r2}
 800543e:	b662      	cpsie	i
 8005440:	4718      	bx	r3
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	46c0      	nop			; (mov r8, r8)

08005450 <pxCurrentTCBConst2>:
 8005450:	20000be4 	.word	0x20000be4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46c0      	nop			; (mov r8, r8)

08005458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <xPortStartScheduler+0x40>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <xPortStartScheduler+0x40>)
 8005462:	21ff      	movs	r1, #255	; 0xff
 8005464:	0409      	lsls	r1, r1, #16
 8005466:	430a      	orrs	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800546a:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <xPortStartScheduler+0x40>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <xPortStartScheduler+0x40>)
 8005470:	21ff      	movs	r1, #255	; 0xff
 8005472:	0609      	lsls	r1, r1, #24
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005478:	f000 f898 	bl	80055ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <xPortStartScheduler+0x44>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005482:	f7ff ffcd 	bl	8005420 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005486:	f7ff f979 	bl	800477c <vTaskSwitchContext>
	prvTaskExitError();
 800548a:	f7ff ffa7 	bl	80053dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800548e:	2300      	movs	r3, #0
}
 8005490:	0018      	movs	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	e000ed20 	.word	0xe000ed20
 800549c:	2000000c 	.word	0x2000000c

080054a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <vPortYield+0x1c>)
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	0552      	lsls	r2, r2, #21
 80054aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80054ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80054b0:	f3bf 8f6f 	isb	sy
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80054c4:	b672      	cpsid	i
	uxCriticalNesting++;
 80054c6:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <vPortEnterCritical+0x20>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <vPortEnterCritical+0x20>)
 80054ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80054d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80054d4:	f3bf 8f6f 	isb	sy
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	2000000c 	.word	0x2000000c

080054e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <vPortExitCritical+0x2c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <vPortExitCritical+0x10>
 80054f0:	b672      	cpsid	i
 80054f2:	e7fe      	b.n	80054f2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <vPortExitCritical+0x2c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <vPortExitCritical+0x2c>)
 80054fc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <vPortExitCritical+0x2c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d100      	bne.n	8005508 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005506:	b662      	cpsie	i
	}
}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	2000000c 	.word	0x2000000c

08005514 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005514:	f3ef 8010 	mrs	r0, PRIMASK
 8005518:	b672      	cpsid	i
 800551a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	0018      	movs	r0, r3

08005520 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005520:	f380 8810 	msr	PRIMASK, r0
 8005524:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005526:	46c0      	nop			; (mov r8, r8)
	...

08005530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005530:	f3ef 8009 	mrs	r0, PSP
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <pxCurrentTCBConst>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	3820      	subs	r0, #32
 800553a:	6010      	str	r0, [r2, #0]
 800553c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800553e:	4644      	mov	r4, r8
 8005540:	464d      	mov	r5, r9
 8005542:	4656      	mov	r6, sl
 8005544:	465f      	mov	r7, fp
 8005546:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005548:	b508      	push	{r3, lr}
 800554a:	b672      	cpsid	i
 800554c:	f7ff f916 	bl	800477c <vTaskSwitchContext>
 8005550:	b662      	cpsie	i
 8005552:	bc0c      	pop	{r2, r3}
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	6808      	ldr	r0, [r1, #0]
 8005558:	3010      	adds	r0, #16
 800555a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800555c:	46a0      	mov	r8, r4
 800555e:	46a9      	mov	r9, r5
 8005560:	46b2      	mov	sl, r6
 8005562:	46bb      	mov	fp, r7
 8005564:	f380 8809 	msr	PSP, r0
 8005568:	3820      	subs	r0, #32
 800556a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800556c:	4718      	bx	r3
 800556e:	46c0      	nop			; (mov r8, r8)

08005570 <pxCurrentTCBConst>:
 8005570:	20000be4 	.word	0x20000be4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005574:	46c0      	nop			; (mov r8, r8)
 8005576:	46c0      	nop			; (mov r8, r8)

08005578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800557e:	f7ff ffc9 	bl	8005514 <ulSetInterruptMaskFromISR>
 8005582:	0003      	movs	r3, r0
 8005584:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005586:	f7ff f849 	bl	800461c <xTaskIncrementTick>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d003      	beq.n	8005596 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <xPortSysTickHandler+0x30>)
 8005590:	2280      	movs	r2, #128	; 0x80
 8005592:	0552      	lsls	r2, r2, #21
 8005594:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff ffc1 	bl	8005520 <vClearInterruptMaskFromISR>
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <vPortSetupTimerInterrupt+0x38>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <vPortSetupTimerInterrupt+0x3c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	22fa      	movs	r2, #250	; 0xfa
 80055c2:	0091      	lsls	r1, r2, #2
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7fa fd9f 	bl	8000108 <__udivsi3>
 80055ca:	0003      	movs	r3, r0
 80055cc:	001a      	movs	r2, r3
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <vPortSetupTimerInterrupt+0x40>)
 80055d0:	3a01      	subs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055d6:	2207      	movs	r2, #7
 80055d8:	601a      	str	r2, [r3, #0]
}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	e000e010 	.word	0xe000e010
 80055e4:	e000e018 	.word	0xe000e018
 80055e8:	20000000 	.word	0x20000000
 80055ec:	e000e014 	.word	0xe000e014

080055f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80055fc:	f7fe ff68 	bl	80044d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005600:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <pvPortMalloc+0x140>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005608:	f000 f8ec 	bl	80057e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800560c:	4b49      	ldr	r3, [pc, #292]	; (8005734 <pvPortMalloc+0x144>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4013      	ands	r3, r2
 8005614:	d000      	beq.n	8005618 <pvPortMalloc+0x28>
 8005616:	e07e      	b.n	8005716 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800561e:	2208      	movs	r2, #8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	189b      	adds	r3, r3, r2
 8005624:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2207      	movs	r2, #7
 800562a:	4013      	ands	r3, r2
 800562c:	d00a      	beq.n	8005644 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2207      	movs	r2, #7
 8005632:	4393      	bics	r3, r2
 8005634:	3308      	adds	r3, #8
 8005636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2207      	movs	r2, #7
 800563c:	4013      	ands	r3, r2
 800563e:	d001      	beq.n	8005644 <pvPortMalloc+0x54>
 8005640:	b672      	cpsid	i
 8005642:	e7fe      	b.n	8005642 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d065      	beq.n	8005716 <pvPortMalloc+0x126>
 800564a:	4b3b      	ldr	r3, [pc, #236]	; (8005738 <pvPortMalloc+0x148>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d860      	bhi.n	8005716 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <pvPortMalloc+0x14c>)
 8005656:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005658:	4b38      	ldr	r3, [pc, #224]	; (800573c <pvPortMalloc+0x14c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800565e:	e004      	b.n	800566a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d903      	bls.n	800567c <pvPortMalloc+0x8c>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f1      	bne.n	8005660 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800567c:	4b2c      	ldr	r3, [pc, #176]	; (8005730 <pvPortMalloc+0x140>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	429a      	cmp	r2, r3
 8005684:	d047      	beq.n	8005716 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2208      	movs	r2, #8
 800568c:	189b      	adds	r3, r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	2308      	movs	r3, #8
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d916      	bls.n	80056d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	18d3      	adds	r3, r2, r3
 80056ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2207      	movs	r2, #7
 80056b4:	4013      	ands	r3, r2
 80056b6:	d001      	beq.n	80056bc <pvPortMalloc+0xcc>
 80056b8:	b672      	cpsid	i
 80056ba:	e7fe      	b.n	80056ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f000 f8e7 	bl	80058a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056d6:	4b18      	ldr	r3, [pc, #96]	; (8005738 <pvPortMalloc+0x148>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	4b15      	ldr	r3, [pc, #84]	; (8005738 <pvPortMalloc+0x148>)
 80056e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056e4:	4b14      	ldr	r3, [pc, #80]	; (8005738 <pvPortMalloc+0x148>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <pvPortMalloc+0x150>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d203      	bcs.n	80056f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056f0:	4b11      	ldr	r3, [pc, #68]	; (8005738 <pvPortMalloc+0x148>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <pvPortMalloc+0x150>)
 80056f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <pvPortMalloc+0x144>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	431a      	orrs	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <pvPortMalloc+0x154>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <pvPortMalloc+0x154>)
 8005714:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005716:	f7fe fee7 	bl	80044e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2207      	movs	r2, #7
 800571e:	4013      	ands	r3, r2
 8005720:	d001      	beq.n	8005726 <pvPortMalloc+0x136>
 8005722:	b672      	cpsid	i
 8005724:	e7fe      	b.n	8005724 <pvPortMalloc+0x134>
	return pvReturn;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b006      	add	sp, #24
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20001e18 	.word	0x20001e18
 8005734:	20001e2c 	.word	0x20001e2c
 8005738:	20001e1c 	.word	0x20001e1c
 800573c:	20001e10 	.word	0x20001e10
 8005740:	20001e20 	.word	0x20001e20
 8005744:	20001e24 	.word	0x20001e24

08005748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d03a      	beq.n	80057d0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800575a:	2308      	movs	r3, #8
 800575c:	425b      	negs	r3, r3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	18d3      	adds	r3, r2, r3
 8005762:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <vPortFree+0x90>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4013      	ands	r3, r2
 8005772:	d101      	bne.n	8005778 <vPortFree+0x30>
 8005774:	b672      	cpsid	i
 8005776:	e7fe      	b.n	8005776 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <vPortFree+0x3c>
 8005780:	b672      	cpsid	i
 8005782:	e7fe      	b.n	8005782 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <vPortFree+0x90>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4013      	ands	r3, r2
 800578e:	d01f      	beq.n	80057d0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11b      	bne.n	80057d0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <vPortFree+0x90>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057a8:	f7fe fe92 	bl	80044d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <vPortFree+0x94>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	18d2      	adds	r2, r2, r3
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <vPortFree+0x94>)
 80057b8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 f871 	bl	80058a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057c2:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <vPortFree+0x98>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <vPortFree+0x98>)
 80057ca:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80057cc:	f7fe fe8c 	bl	80044e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057d0:	46c0      	nop			; (mov r8, r8)
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b004      	add	sp, #16
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20001e2c 	.word	0x20001e2c
 80057dc:	20001e1c 	.word	0x20001e1c
 80057e0:	20001e28 	.word	0x20001e28

080057e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057ea:	23c0      	movs	r3, #192	; 0xc0
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057f0:	4b26      	ldr	r3, [pc, #152]	; (800588c <prvHeapInit+0xa8>)
 80057f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2207      	movs	r2, #7
 80057f8:	4013      	ands	r3, r2
 80057fa:	d00c      	beq.n	8005816 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3307      	adds	r3, #7
 8005800:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2207      	movs	r2, #7
 8005806:	4393      	bics	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	4b1e      	ldr	r3, [pc, #120]	; (800588c <prvHeapInit+0xa8>)
 8005812:	18d3      	adds	r3, r2, r3
 8005814:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <prvHeapInit+0xac>)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <prvHeapInit+0xac>)
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800582e:	2208      	movs	r2, #8
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2207      	movs	r2, #7
 800583a:	4393      	bics	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4b14      	ldr	r3, [pc, #80]	; (8005894 <prvHeapInit+0xb0>)
 8005842:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <prvHeapInit+0xb0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2200      	movs	r2, #0
 800584a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <prvHeapInit+0xb0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	1ad2      	subs	r2, r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <prvHeapInit+0xb0>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <prvHeapInit+0xb4>)
 8005870:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <prvHeapInit+0xb8>)
 8005878:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <prvHeapInit+0xbc>)
 800587c:	2280      	movs	r2, #128	; 0x80
 800587e:	0612      	lsls	r2, r2, #24
 8005880:	601a      	str	r2, [r3, #0]
}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	46bd      	mov	sp, r7
 8005886:	b004      	add	sp, #16
 8005888:	bd80      	pop	{r7, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	20001210 	.word	0x20001210
 8005890:	20001e10 	.word	0x20001e10
 8005894:	20001e18 	.word	0x20001e18
 8005898:	20001e20 	.word	0x20001e20
 800589c:	20001e1c 	.word	0x20001e1c
 80058a0:	20001e2c 	.word	0x20001e2c

080058a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058ac:	4b27      	ldr	r3, [pc, #156]	; (800594c <prvInsertBlockIntoFreeList+0xa8>)
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e002      	b.n	80058b8 <prvInsertBlockIntoFreeList+0x14>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d8f7      	bhi.n	80058b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	18d3      	adds	r3, r2, r3
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d108      	bne.n	80058e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	18d2      	adds	r2, r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	18d2      	adds	r2, r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d118      	bne.n	800592c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <prvInsertBlockIntoFreeList+0xac>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d00d      	beq.n	8005922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	18d2      	adds	r2, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e008      	b.n	8005934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <prvInsertBlockIntoFreeList+0xac>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e003      	b.n	8005934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d002      	beq.n	8005942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	b004      	add	sp, #16
 8005948:	bd80      	pop	{r7, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	20001e10 	.word	0x20001e10
 8005950:	20001e18 	.word	0x20001e18

08005954 <memset>:
 8005954:	0003      	movs	r3, r0
 8005956:	1882      	adds	r2, r0, r2
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	7019      	strb	r1, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <__libc_init_array>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	2600      	movs	r6, #0
 8005968:	4c0c      	ldr	r4, [pc, #48]	; (800599c <__libc_init_array+0x38>)
 800596a:	4d0d      	ldr	r5, [pc, #52]	; (80059a0 <__libc_init_array+0x3c>)
 800596c:	1b64      	subs	r4, r4, r5
 800596e:	10a4      	asrs	r4, r4, #2
 8005970:	42a6      	cmp	r6, r4
 8005972:	d109      	bne.n	8005988 <__libc_init_array+0x24>
 8005974:	2600      	movs	r6, #0
 8005976:	f000 f823 	bl	80059c0 <_init>
 800597a:	4c0a      	ldr	r4, [pc, #40]	; (80059a4 <__libc_init_array+0x40>)
 800597c:	4d0a      	ldr	r5, [pc, #40]	; (80059a8 <__libc_init_array+0x44>)
 800597e:	1b64      	subs	r4, r4, r5
 8005980:	10a4      	asrs	r4, r4, #2
 8005982:	42a6      	cmp	r6, r4
 8005984:	d105      	bne.n	8005992 <__libc_init_array+0x2e>
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	00b3      	lsls	r3, r6, #2
 800598a:	58eb      	ldr	r3, [r5, r3]
 800598c:	4798      	blx	r3
 800598e:	3601      	adds	r6, #1
 8005990:	e7ee      	b.n	8005970 <__libc_init_array+0xc>
 8005992:	00b3      	lsls	r3, r6, #2
 8005994:	58eb      	ldr	r3, [r5, r3]
 8005996:	4798      	blx	r3
 8005998:	3601      	adds	r6, #1
 800599a:	e7f2      	b.n	8005982 <__libc_init_array+0x1e>
 800599c:	08005b00 	.word	0x08005b00
 80059a0:	08005b00 	.word	0x08005b00
 80059a4:	08005b04 	.word	0x08005b04
 80059a8:	08005b00 	.word	0x08005b00

080059ac <memcpy>:
 80059ac:	2300      	movs	r3, #0
 80059ae:	b510      	push	{r4, lr}
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d100      	bne.n	80059b6 <memcpy+0xa>
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	5ccc      	ldrb	r4, [r1, r3]
 80059b8:	54c4      	strb	r4, [r0, r3]
 80059ba:	3301      	adds	r3, #1
 80059bc:	e7f8      	b.n	80059b0 <memcpy+0x4>
	...

080059c0 <_init>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr

080059cc <_fini>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr
